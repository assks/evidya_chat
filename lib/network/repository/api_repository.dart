import 'dart:convert';
import 'dart:io';

import 'package:evidya/model/GroupListModal.dart';
import 'package:evidya/model/StudentLearningDetailsModal.dart';
import 'package:evidya/model/all_intructor_modal.dart';
import 'package:evidya/model/chatimageuplord.dart';
import 'package:evidya/model/course_detail_modal.dart';
import 'package:evidya/model/course_modal.dart';
import 'package:evidya/model/courses_modal.dart';
import 'package:evidya/model/follow_intructor_modal.dart';
import 'package:evidya/model/followed_instructor_modal.dart';
import 'package:evidya/model/fpasswordmodal.dart';
import 'package:evidya/model/groupcontact.dart';
import 'package:evidya/model/history_modal.dart';
import 'package:evidya/model/instructor_course_modal.dart';
import 'package:evidya/model/instructor_details_modal.dart';
import 'package:evidya/model/instructor_profile_modal.dart';
import 'package:evidya/model/lesson_modal.dart';
import 'package:evidya/model/liked_course_modal.dart';
import 'package:evidya/model/live_class_modal.dart';
import 'package:evidya/model/lms_home_modal.dart';
import 'package:evidya/model/lms_search_modal.dart';
import 'package:evidya/model/login/contactsmatch_Modal.dart';
import 'package:evidya/model/meet_list__modal.dart';
import 'package:evidya/model/meettoken.dart';
import 'package:evidya/model/recentchatconnectionslist_modal.dart';
import 'package:evidya/model/rtm_token_model.dart';
import 'package:evidya/model/rtm_userName_fetch_modal.dart';
import 'package:evidya/model/rtmtoken_modal.dart';
import 'package:evidya/model/schudlemeetmodal.dart';
import 'package:evidya/model/sub_category_modal.dart';
import 'package:evidya/model/subscribe_lesson_modal.dart';
import 'package:evidya/model/user_profile_modal.dart';
import 'package:evidya/model/videocall_modal.dart';
import 'package:evidya/sharedpref/preference_connector.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:http_parser/http_parser.dart';
import 'package:dio/dio.dart';
import 'package:evidya/model/catogary.dart';
import 'package:evidya/model/home.dart';
import 'package:evidya/constants/string_constant.dart';
import 'package:evidya/model/livetoken_model.dart';
import 'package:evidya/model/login/autogenerated.dart';
import 'package:evidya/model/login_res.dart';
import 'package:evidya/model/schudleclassmodal.dart';
import 'package:evidya/network/api_client/api_rest_client.dart';
//import 'package:evidya/screens/bloc/bloc/post_bloc.dart';
import 'package:evidya/utils/helper.dart';
import 'package:image_picker/image_picker.dart';

import '../../model/get_request_class_list_modal.dart';
import '../../model/profile.dart';

class ApiRepository {
  ApiRestClient apiRestClient;

  Dio _dio;

  ApiRepository() {
    BaseOptions options =  BaseOptions(
      baseUrl: StringConstant.BASE_URL,
        receiveDataWhenStatusError: true,
    );
    _dio = Dio(options);
    _dio.options.headers["Accept"] = "application/json";
    _dio.options.connectTimeout=150000;
    apiRestClient = ApiRestClient(_dio);
  }


  Future<Autogenerated> userLogin(String email,
      String password,String fcmToken) async {
    dynamic data = {
      "email": email,
      "password": password,
      "fcm_token": fcmToken
    };
    var response = await _dio.post(
        StringConstant.BASE_URL + "auth", data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Autogenerated> Otpvalidaction(String phoneno,
      ) async {
    dynamic data = {
      "phone": phoneno,
    };
    var response = await _dio.post(StringConstant.BASE_URL + "sms/registration-otp", data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }


  Future<Autogenerated> userRegistration(String name, String phoneNo,
      String email,
      String password, String confirmpassword,) async {
    dynamic data = {
      "name": name,
      "email": email,
      "phone": phoneNo,
      "password": password,
      "password_confirmation": confirmpassword
    };
    var response = await _dio.post(
        StringConstant.BASE_URL + "user/create", data: data);
    if (response.statusCode == 200) {
      return Autogenerated.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<LoginModel> ChangePassword(String oldpassword, String newpassword,
      String confirmedpassword, String token, String email) async {
    _dio.options.headers["Authorization"] = "bearer  ${token}";
    dynamic data = {
      "NewPassword": newpassword,
      "ConfirmNewPassword": confirmedpassword,
      "EmailAddress": email,
      "OldPassword": oldpassword
    };
    var response = await _dio.put(
        StringConstant.BASE_URL + "/User/ChangePassword",
        data: data);
    if (response.statusCode == 200) {
      return LoginModel.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Fpasswordmodal> forgetPasswordApiCall(String email) async {
    dynamic data = {"email": email};
    var response = await _dio.post(StringConstant.BASE_URL + "forget-password", data: data);
    if (response.statusCode == 200) {
      return Fpasswordmodal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RtmtokenModal> Messanger_rtmtoken(String token) async {
    _dio.options.headers["X-Auth-Token"] = token;
    var response = await _dio.post(StringConstant.BASE_URL + "messenger/build");
    if (response.statusCode == 200) {
      return RtmtokenModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<RecentchatconnectionslistModal> recentconnection( String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";

    var response = await _dio.get(StringConstant.BASE_URL + "connections");
    if (response.statusCode == 200) {
      return RecentchatconnectionslistModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> updateProfilePic(
      String token, File file) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    String fileName = file.path.split('/').last;
    var formData = FormData.fromMap({
      'image': await MultipartFile.fromFile(file.path, filename: fileName),
    });
    var response = await _dio.post(
        StringConstant.BASE_URL + "profile/upload",
        data: formData);
    if (response.statusCode == 200) {
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<Autogenerated> fcmnotifiction(String message,var name,var token, image,callId,var type,fcmtoken,userprofile) async {
    _dio.options.headers["Authorization"] = "key=  ${'AAAAG8bzeow:APA91bEQai_ldUEZoR-i2WWNqPhjycgkH93YSE90pjKBF2LjjT6HrgtRfbTxvMh0wPsTWMquzBRHp29BX8iPykTbeMYThG4r7SVzQwGsRuVd0rOhyJsrB593XsKopDdVEjIdqyEuESxT'}";
    var priority= "normal";
    if(type=="call_channel"){
      priority= "high";
    }
    dynamic data = {
      'registration_ids': [token, "token_2"],
      "type" : type,
      "data" : {
        "type" : type,
        'title': name,
        'body': message,
        'image': image,
        'call_id': callId,
        'channelKey': type,
        'fcm_token': fcmtoken,
        'userprofile':userprofile
      },
      "ttl":"60s",
      "android":{
        "priority": priority
      },
      "priority": 10
    };

    var response = await _dio.post('https://fcm.googleapis.com/fcm/send',data:data);
    if (response.statusCode == 200) {
      // EasyLoading.showToast("FCMResponse=${response.data["success"]}",toastPosition: EasyLoadingToastPosition.bottom);
      return Autogenerated.fromJson(response.data);
    } else {
      // EasyLoading.showToast("FCMResponse=${response.statusMessage}",toastPosition: EasyLoadingToastPosition.bottom);
      return null;
    }
  }

  Future<RTMUserNameFetchModal> rtmFetchUserName(String token,
      String iD, String name) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    dynamic data =
    {
      "id": iD,
      "name": name
    };
    var response = await _dio.post(
        StringConstant.BASE_URL + "meeting-rtm-token",data: data);
    if (response.statusCode == 200) {
      return RTMUserNameFetchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<ContactsmatchModal> searchusers(String search, String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    dynamic data = {
      "term": search,
    };
    var response = await _dio.post(StringConstant.BASE_URL + "connection/search",
        data: data);
    if (response.statusCode == 200) {
      return ContactsmatchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<RtmtokenModal> addfriend(var id, String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    dynamic data = {
      "connection_id": id,
    };
    var response = await _dio.post(StringConstant.BASE_URL + "connection/add",data: data);
    if (response.statusCode == 200) {
      return RtmtokenModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<dynamic> addGroupMembers({String token,
    String groupId,
    String members,

  }) async {
    // print("Sir Sorry $token");
    dynamic data = {
      'group_id': groupId,
      'members': members
    };
    _dio.options.headers["X-Auth-Token"] = "$token";
    var response = await _dio.post(
        StringConstant.BASE_URL + "connection/add-group-members",data: data);

    if (response.statusCode == 200) {
      print("Response ${response.data}");
      return response.data;
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<ContactsmatchModal> searchcontact(List numbers, String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    dynamic data = { "numbers": numbers.join(',').replaceAll(' ', ''),};
    var response = await _dio.post(StringConstant.BASE_URL + "connection/match",
        data: data);
    if (response.statusCode == 200) {
      return ContactsmatchModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<VideocallModal> videocallapi(var name,var id ,String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    dynamic data = {
      "callee_id": id,
      "callee_name": name,
    };
    var response = await _dio.post(StringConstant.BASE_URL + "messenger/start-call",data: data);
    if (response.statusCode == 200) {
      return VideocallModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<VideocallModal> receivevideocallapi(var callid ,String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    var response = await _dio.get(StringConstant.BASE_URL + "messenger/receive-call?call_id="+callid);
    if (response.statusCode == 200) {
      return VideocallModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<Chatimageuplord> uplordchatimage
      (String token,XFile file) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    String fileName = file.path.split('/').last;
    var formData = FormData.fromMap({'file': await MultipartFile.fromFile(file.path, filename: fileName),
    });
    var response = await _dio.post(StringConstant.BASE_URL + "messenger/attachment", data: formData);
    if (response.statusCode == 200) {
      return Chatimageuplord.fromJson(response.data);
    } else {
      // Helper.showMessage(response.statusMessage);
      EasyLoading.showToast("Unable to send",
          toastPosition: EasyLoadingToastPosition.top,
          duration: const Duration(seconds: 5));
      return null;
    }
  }
  Future<dynamic> deletegroupmember({String token,
    int groupid,
    String membername,
    String groupMemberid,
    String endpoint

  }) async {

    FormData formData = FormData.fromMap({
      "group_id": groupid,
      "user_name": membername,
      "peer_id": groupMemberid,
    });
    _dio.options.headers["X-Auth-Token"] = "$token";
    var response = await _dio.post(
        StringConstant.BASE_URL +"connection/"+endpoint,
        data: formData);

    if (response.statusCode == 200) {
      print("Response ${response.data}");
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

  Future<GroupListModal> groupList(String token) async {
    print("Sir Sorry $token");
    _dio.options.headers["X-Auth-Token"] = "$token";
    var response = await _dio.get(StringConstant.BASE_URL  +"connection/groups");
    if (response.statusCode == 200) {
      print("Response ${response.data}");
      return GroupListModal.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }

  Future<Groupcontact> groupcontact( String token) async {
    _dio.options.headers["X-Auth-Token"] = "${token}";
    var response = await _dio.post(StringConstant.BASE_URL + "connection/all");
    if (response.statusCode == 200) {
      return Groupcontact.fromJson(response.data);
    } else {
      Helper.showMessage(response.statusMessage);
      return null;
    }
  }
  Future<dynamic> createGroup({String token,
    String groupName,
    String groupDescription,
    File image,
    String groupMember,
  }) async {
    String fileName = image.path.split('/').last;
    FormData formData = FormData.fromMap({
      "name": groupName,
      "description": groupDescription,
      "image": await MultipartFile.fromFile(image.path, filename: fileName),
      "members": groupMember,
    });
    _dio.options.headers["X-Auth-Token"] = "$token";
    var response = await _dio.post(
        StringConstant.BASE_URL +"connection/create-group",
        data: formData);

    if (response.statusCode == 200) {
      print("Response ${response.data}");
      return response.data;
    } else {
      EasyLoading.showToast(response.statusMessage);
      return null;
    }
  }

}
