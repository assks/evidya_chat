import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:evidya/screens/messenger/tabview.dart';
import 'package:evidya/sharedpref/preference_connector.dart';
import 'package:evidya/screens/messenger/fullscreenimage.dart';
import 'package:evidya/screens/messenger/pdfviewer.dart';
import 'package:file_picker/file_picker.dart';
import 'package:event_bus/event_bus.dart';
import 'package:evidya/constants/color_constant.dart';
import 'package:evidya/constants/string_constant.dart';
import 'package:evidya/network/repository/api_repository.dart';
import 'package:evidya/notificationservice/LocalNotificationService.dart';
import 'package:evidya/screens/messenger/sender_profile_page.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/services.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:agora_rtm/agora_rtm.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:evidya/localdb/databasehelper.dart';
import 'package:evidya/model/login/autogenerated.dart';
import 'package:evidya/model/login/contactsmatch_Modal.dart';
import 'package:evidya/model/recentchatconnectionslist_modal.dart';
import 'package:evidya/resources/app_colors.dart';
import 'package:evidya/screens/livestreaming/broadcast/TestLiveStream.dart';
import 'package:evidya/screens/messenger/logs.dart';
import 'package:evidya/utils/helper.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:sizer/sizer.dart';
import 'package:swipe_to/swipe_to.dart';
import 'package:video_player/video_player.dart';
import '../livestreaming/broadcast/audiocallpage.dart';
import 'chatscreenutils.dart';
import 'msgvideoplayer.dart';

EventBus eventBus = EventBus();

class Chat_Screen extends StatefulWidget {
  final AgoraRtmClient client;
  final AgoraRtmChannel channel;
  final String rtmpeerid;
  final LogController logController;
  final MessageLog messagePeerId;
  final Contacts userdetails;
  final Connections recentchatuserdetails;
  final List<Connections> userlist;



  const Chat_Screen(
      {Key key,
      this.client,
      this.channel,
      this.logController,
      this.userdetails,
      this.messagePeerId,
      this.rtmpeerid,
      this.recentchatuserdetails,
      this.userlist})
      : super(key: key);

  @override
  _Chat_ScreenState createState() => _Chat_ScreenState();
}

class _Chat_ScreenState extends State<Chat_Screen> {
  final _peerMessage = TextEditingController();
  final ScrollController _controller = ScrollController();
  VideoPlayerController _videoPlayerController;
  var onlinestatus = "offline";
  String replytex = "", username;
  bool replyvisibility = false;
  final dbHelper = DatabaseHelper.instance;
  MessageLog messagelog = MessageLog();
  final picker = ImagePicker();
  RegExp fileExp = RegExp(r"([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg)");
  dynamic afile = false;
  Timer timer;
  ClassLog classlog = ClassLog();
  var Logindata, userpeerid;
  dynamic profileJson;
  String recieptPerson;
  String message = "";
  String devicefcmtoken;
  int length = 0;
  bool loading = false;
  var seleteduserlist = [];
  AnimationController controller;
  AgoraRtmClient _client;

  @override
  void initState() {
    if(widget.userdetails==null){
      _gettoken();
    }
    _isUserOnline();
    Timer.periodic(const Duration(seconds: 10), (timer) {
     // print("Timer");
      _isUserOnline();
    });
    queryRowCount();
    localdata();
    super.initState();
    recieptPerson = widget.recentchatuserdetails.name;
    // getDeviceTokenToSendNotification();
  }

  /// this fun call on deleting a msg from sqlfite localdata
  void _delete(msgid, index) async {
    var rowsDeleted;
    rowsDeleted = await dbHelper.deletemsg(msgid);
   // print(rowsDeleted.toString() + 'row deleted' + index.toString());
    widget.logController.removeLog(index);
  }

  /// getting sqflite localdata for chat history.
  void queryRowCount() async {
    await PreferenceConnector.getJsonToSharedPreferenceertmuserpeerid(
            StringConstant.rtmuserpeerid)
        .then((value) => {
              if (value != null) {userpeerid = value}
            });
    final allRows = await dbHelper.queryRowCount(widget.rtmpeerid.toString(), userpeerid.toString());
    widget.logController.clear();
       allRows.forEach((row) => {
          if (row != null)
            {
              widget.logController.addLog(row["message"] + "#@####@#" + row["diraction"] + "#@####@#" + row['type1'] + "#@####@#" + row["timestamp"] + "#@####@#" + row["id"].toString() + "#@####@#" + widget.rtmpeerid),
            }
        });
  }

  @override
  void dispose() async {
    // TODO: implement dispose
    widget.logController.value.clear();
    replytex = '';
    timer?.cancel();
    await dbHelper.deletebadge(widget.rtmpeerid);
    clearprefnacedata();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return WillPopScope(
      child: Container(
        height: size.height,
        decoration: const BoxDecoration(
          image: DecorationImage(
              image: AssetImage("assets/images/back_ground.jpg"),
              fit: BoxFit.fill),
        ),
        child: SafeArea(
          child: Scaffold(
              backgroundColor: Colors.transparent,
              appBar: PreferredSize(
                  preferredSize: Size.fromHeight(11.h),
                  // here the desired height
                  child: Column(
                    children: [
                      Container(
                          padding: EdgeInsets.symmetric(
                              horizontal: 1.h, vertical: 1.h),
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Row(
                                children: [
                                  InkWell(
                                      onTap: () {
                                        dbHelper.deletebadge(widget.rtmpeerid);
                                        Navigator.pushAndRemoveUntil(
                                            context,
                                            MaterialPageRoute(
                                                builder: (context) =>
                                                messengertab()),
                                            (Route<dynamic> route) => false);
                                      },
                                      child: CircleAvatar(
                                        backgroundColor: Colors.transparent,
                                        radius: 18,
                                        child: Icon(Icons.keyboard_backspace,
                                            size: 3.h, color: Colors.white),
                                      )),
                                  SizedBox(
                                    width: 1.h,
                                  ),
                                  InkWell(
                                    child: Row(
                                      children: [
                                        Container(
                                          height: 7.h,
                                          width: 15.w,
                                          decoration: BoxDecoration(
                                            borderRadius:
                                                BorderRadius.circular(10),
                                            color: Colors.white,
                                          ),
                                          child: ClipRRect(
                                            borderRadius: BorderRadius.circular(10),
                                            child: widget.recentchatuserdetails.profile_image==""? Image.asset('assets/images/profile_demo.png',
                                              height: 7.h,
                                              width: 15.w,
                                              fit: BoxFit.contain,
                                            ):CachedNetworkImage(
                                              fit: BoxFit.cover,
                                              width: 25.w,
                                              height: 10.h,
                                              imageUrl: StringConstant.IMAGE_URL +
                                                  widget.recentchatuserdetails.profile_image,
                                              placeholder: (context, url) =>
                                                  Helper.onScreenProgress(),
                                              errorWidget: (context, url, error) =>
                                              const Icon(Icons.person),
                                            ),
                                          ),
                                        ),
                                        SizedBox(width: 1.h),
                                        SizedBox(
                                          width: 40.w,
                                          child: Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                "${widget.recentchatuserdetails.name}",
                                                style: TextStyle(
                                                    fontSize: 2.5.h,
                                                    color: Colors.white,
                                                    fontWeight:
                                                        FontWeight.bold),
                                              ),
                                              Text(
                                                "${onlinestatus}",
                                                style: TextStyle(
                                                    fontSize: 2.0.h,
                                                    color: Colors.white),
                                              )
                                            ],
                                          ),
                                        )
                                      ],
                                    ),
                                    onTap: () {
                                      Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                              builder: (context) =>
                                                  SenderProfilePage(
                                                      senderdetails: widget.recentchatuserdetails,
                                                      peerid: userpeerid,
                                                      logcontroller: widget.logController,
                                                      senderpeerid: widget.recentchatuserdetails.peerId,
                                                      senderName: widget.recentchatuserdetails.name
                                                      )));
                                    },
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  InkWell(
                                    child: CircleAvatar(
                                      backgroundColor: Colors.white,
                                      radius: 2.2.h,
                                      child: Image.asset(
                                        "assets/icons/svg/camera.png",
                                        height: 3.h,
                                        width: 3.h,
                                        color: const Color(0xFF5c0e35),
                                      ),
                                    ),
                                    onTap: () {
                                      Navigator.of(context).push(
                                        MaterialPageRoute(
                                          builder: (context) => TestLiveStream(
                                              userName: Logindata.id.toString(),
                                              userCallId: widget
                                                  .recentchatuserdetails.id,
                                              userFcmToken: Logindata.authToken,
                                              userCallName: widget
                                                  .recentchatuserdetails.name,
                                              calleeFcmToken: widget
                                                  .recentchatuserdetails
                                                  .fcm_token),
                                        ),
                                      );
                                    },
                                  ),
                                  const SizedBox(width: 10),
                                  InkWell(
                                    child: CircleAvatar(
                                      backgroundColor: Colors.white,
                                      radius: 2.2.h,
                                      child: Image.asset(
                                        "assets/icons/svg/call.png",
                                        height: 3.h,
                                        width: 3.h,
                                        color: const Color(0xFF5c0e35),
                                      ),
                                    ),
                                    onTap: () {
                                      Navigator.of(context).push(
                                        MaterialPageRoute(
                                          builder: (context) => AudioCallpage(
                                              userName: Logindata.id.toString(),
                                              userCallId: widget.recentchatuserdetails.id,
                                              userFcmToken: Logindata.authToken,
                                              userCallName: widget.recentchatuserdetails.name,
                                              userprofileimage: Logindata.image,
                                              calleeFcmToken: widget.recentchatuserdetails.fcm_token,
                                              devicefcmtoken: devicefcmtoken),
                                        ),
                                      );
                                    },
                                  )
                                ],
                              )
                            ],
                          )),
                    ],
                  )),
              body: Container(
                height: MediaQuery.of(context).size.height,
                width: MediaQuery.of(context).size.width,
                decoration: const BoxDecoration(
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                  color: Colors.transparent,
                  image: DecorationImage(
                      image: AssetImage("assets/images/grey_background.jpg"),
                      fit: BoxFit.fill),
                ),
                child: Column(
                  children: <Widget>[
                    Expanded(child: Padding(
                      padding: EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                      child: Column(
                        children: <Widget>[
                          ValueListenableBuilder(
                            valueListenable: widget.logController,
                            builder: (context, log, wdgt) {
                              if (log.length >= length) {
                                _scrollDown(log.length);
                                length++;
                              }
                              return Expanded(
                                child: ListView.separated(
                                  controller: _controller,
                                 // physics: const NeverScrollableScrollPhysics(),
                                  reverse: false,
                                  shrinkWrap: true,
                                  itemBuilder: (context, i) {
                                    dynamic parts = log[i].split('#@####@#');
                                    if (parts[7] == widget.rtmpeerid) {
                                      if (parts.length > 0) {
                                        if (parts[3].trim() != null &&
                                            parts[4] != 'image') {
                                          return SwipeTo(
                                              child: Container(
                                                  alignment: (parts[3] != 'send'
                                                      ? Alignment.topLeft
                                                      : Alignment.topRight),
                                                  child: Row(
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .start,
                                                    mainAxisAlignment:
                                                        parts[3] != 'send'
                                                            ? MainAxisAlignment
                                                                .start
                                                            : MainAxisAlignment
                                                                .end,
                                                    children: [
                                                      if (parts[3] == 'Receive')
                                                        CircleAvatar(
                                                          backgroundColor:
                                                              const Color(
                                                                  0xFF5c0e35),
                                                          child: Text(
                                                            widget
                                                                .recentchatuserdetails
                                                                .name[0],
                                                            style:
                                                                const TextStyle(
                                                                    color: Colors
                                                                        .white),
                                                          ),
                                                        ),
                                                      const SizedBox(width: 10),
                                                      Container(
                                                        constraints:
                                                            BoxConstraints(
                                                                minWidth: 30.w,
                                                                maxWidth: 60.w),
                                                        padding:
                                                            const EdgeInsets
                                                                .all(0),
                                                        decoration: parts[3] != 'send'
                                                            ? const BoxDecoration(
                                                                color: Colors
                                                                    .black12,
                                                                borderRadius:
                                                                    BorderRadius
                                                                        .only(
                                                                  topRight: Radius
                                                                      .circular(
                                                                          10),
                                                                  bottomLeft: Radius
                                                                      .circular(
                                                                          10),
                                                                  bottomRight: Radius
                                                                      .circular(
                                                                          10),
                                                                ))
                                                            : const BoxDecoration(
                                                                gradient:
                                                                    LinearGradient(
                                                                  begin: Alignment
                                                                      .topCenter,
                                                                  end: Alignment
                                                                      .bottomCenter,
                                                                  colors: [
                                                                    Color(
                                                                        0xFF901133),
                                                                    Color(
                                                                        0xFF5c0e35),
                                                                  ],
                                                                ),
                                                                borderRadius:
                                                                    BorderRadius
                                                                        .only(
                                                                  topLeft: Radius
                                                                      .circular(
                                                                          10),
                                                                  //topRight: Radius.circular(10),
                                                                  bottomLeft: Radius
                                                                      .circular(
                                                                          10),
                                                                  bottomRight: Radius
                                                                      .circular(
                                                                          10),
                                                                ),
                                                              ),
                                                        child: GestureDetector(
                                                          onLongPressUp: () {
                                                            _popupdialog(
                                                              parts[4],
                                                                parts[6],
                                                                parts[2],
                                                                i);
                                                          },
                                                          onTap: () {
                                                            if (parts[4] == "doc") {
                                                              Navigator.of(context).push(
                                                                MaterialPageRoute(
                                                                  builder: (context) =>
                                                                      Pdfviewer(pdfpath: parts[2]),
                                                                ),
                                                              );
                                                            } else if (parts[4] == "video") {
                                                              Navigator.of(context).push(
                                                                MaterialPageRoute(
                                                                  builder: (context) =>
                                                                      Msgvideoplayer(videourl: parts[2]),
                                                                ),
                                                              );
                                                            } else if(parts[4]=="image"){
                                                              Navigator.of(context).push(
                                                                MaterialPageRoute(
                                                                  builder: (context) =>
                                                                      FullScreenImage(image: parts[2]),
                                                                ),
                                                              );
                                                            }
                                                          },
                                                          child: Padding(
                                                              padding:
                                                                  const EdgeInsets.all(5.0),
                                                              child: parts[4] == "text" || parts[4] == "doc" || parts[4] == "video"
                                                                  ? Stack(
                                                                      children: [
                                                                        Column(
                                                                          crossAxisAlignment:
                                                                          CrossAxisAlignment.start,
                                                                          children: <Widget>[
                                                                            parts[1] == 'replay'
                                                                                ? Container(
                                                                                    margin: const EdgeInsets.only(left: 8.0, right: 8.0, top: 8.0),
                                                                                    decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(8.0)),
                                                                                    child: IntrinsicHeight(
                                                                                        child: Container(
                                                                                      decoration: BoxDecoration(
                                                                                        color: const Color(0xFFf8ece8),
                                                                                        borderRadius: BorderRadius.circular(8.0),
                                                                                      ),
                                                                                      child: Row(
                                                                                        children: [
                                                                                          Container(
                                                                                            decoration: BoxDecoration(
                                                                                              color: parts[3] != 'send' ? const Color(0xFF800000) : Colors.white,
                                                                                              borderRadius: const BorderRadius.only(
                                                                                                bottomLeft: Radius.circular(30.0),
                                                                                                topLeft: Radius.circular(30.0),
                                                                                              ),
                                                                                            ),
                                                                                            width: 5.0,
                                                                                          ),
                                                                                          const SizedBox(
                                                                                            height: 5,
                                                                                          ),
                                                                                          Expanded(
                                                                                            child: Container(
                                                                                                padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                                                                                                decoration: const BoxDecoration(
                                                                                                  color: Color(0xFFf8ece8),
                                                                                                  borderRadius: BorderRadius.only(
                                                                                                    bottomRight: Radius.circular(30.0),
                                                                                                    topRight: Radius.circular(30.0),
                                                                                                  ),
                                                                                                ),
                                                                                                child: Column(
                                                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                                                  children: [
                                                                                                    parts[3] != 'send'
                                                                                                        ? const Text(
                                                                                                            "You",
                                                                                                            style: TextStyle(
                                                                                                              fontSize: 14.0,
                                                                                                              fontWeight: FontWeight.w600,
                                                                                                              color: Colors.black,
                                                                                                            ),
                                                                                                          )
                                                                                                        : Text(
                                                                                                            recieptPerson,
                                                                                                            style: const TextStyle(
                                                                                                              fontSize: 14.0,
                                                                                                              fontWeight: FontWeight.w600,
                                                                                                              color: Colors.black,
                                                                                                            ),
                                                                                                          ),
                                                                                                    Text(
                                                                                                      parts[0],
                                                                                                      style: TextStyle(
                                                                                                        fontSize: 14.0,
                                                                                                        color: AppColors.cardContainerColor,
                                                                                                      ),
                                                                                                    )
                                                                                                  ],
                                                                                                )),
                                                                                          ),
                                                                                        ],
                                                                                      ),
                                                                                    )),
                                                                                  )
                                                                                : Container(),
                                                                            if (parts[1] == 'forword')
                                                                              IntrinsicHeight(
                                                                                child: Text(parts[3] == "send" ? "forward" : "forwarded...", style: TextStyle(color: Colors.yellow, fontStyle: FontStyle.normal, fontWeight: FontWeight.w100)),
                                                                              ),
                                                                            if (parts[4] == "doc")
                                                                              const IntrinsicHeight(
                                                                                child: Text("Pdf", style: TextStyle(color: Colors.yellow, fontStyle: FontStyle.normal, fontWeight: FontWeight.w500)),
                                                                              ),
                                                                            if(parts[4]== "video")
                                                                              const IntrinsicHeight(
                                                                                child: Text("Video", style: TextStyle(color: Colors.yellow, fontStyle: FontStyle.normal, fontWeight: FontWeight.w500)),
                                                                              ),
                                                                            Padding(
                                                                              padding: const EdgeInsets.only(left: 8.0, right: 8.0, top: 5.0, bottom: 5),
                                                                              child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.center, children: [
                                                                                if (parts[4] == "video") progressbar(log.length, log[i], i),
                                                                                textdocview(parts),
                                                                              ]),
                                                                            )
                                                                          ],
                                                                        ),
                                                                        Positioned(
                                                                          bottom:
                                                                              -3,
                                                                          right:
                                                                              1,
                                                                          child:
                                                                              Align(
                                                                            alignment:
                                                                                Alignment.bottomRight,
                                                                            child:
                                                                                Row(
                                                                              mainAxisAlignment: MainAxisAlignment.end,
                                                                              crossAxisAlignment: CrossAxisAlignment.end,
                                                                              children: [
                                                                                Text(
                                                                                  DateFormat('hh:mm a').format(DateTime.parse(parts[5].trim())),
                                                                                  style: TextStyle(color: parts[3] != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                                  textAlign: TextAlign.end,
                                                                                ),
                                                                                SizedBox(width: 1.w),
                                                                              if(parts[3] != 'Receive')
                                                                                doubletick()




                                                                              ],
                                                                            ),
                                                                          ),
                                                                        )
                                                                      ],
                                                                    )
                                                                  : Column(
                                                                      children: [
                                                                        parts[4] ==
                                                                                "image"
                                                                            ? Image.file(File(parts[2]),
                                                                            fit: BoxFit.cover,
                                                                                errorBuilder: (context, url, error) => const Icon(
                                                                                      Icons.error,
                                                                                      size: 70,
                                                                                      color: Colors.red,
                                                                                      semanticLabel: "image not found",

                                                                                    ))
                                                                            : parts[4] == "network"
                                                                                ? CachedNetworkImage(
                                                                                    fit: BoxFit.cover,
                                                                                    imageUrl: parts[2],

                                                                                    placeholder: (context, url) => LinearProgressIndicator(
                                                                                      minHeight: 20.sp,
                                                                                    ),
                                                                                    errorWidget: (context, url, error) => const Icon(
                                                                                      Icons.error,
                                                                                      size: 50,
                                                                                    ),
                                                                                  )
                                                                                : Container(),
                                                                        const SizedBox(
                                                                          height:
                                                                              10,
                                                                        ),
                                                                        Row(
                                                                            mainAxisAlignment:
                                                                                MainAxisAlignment.end,
                                                                            children: [
                                                                              Text(
                                                                                DateFormat('hh:mm a').format(DateTime.parse(parts[5].trim())),
                                                                                style: TextStyle(color: parts[3] != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                                textAlign: TextAlign.right,
                                                                              ),
                                                                              SizedBox(
                                                                                width: 1.w,
                                                                              ),
                                                                             if(parts[3] != 'Receive')
                                                                               doubletick()
                                                                                   /*Icon(
                                                                                      Icons.done_all_outlined,
                                                                                      color: onlinestatus == 'Online' ? Colors.blue : AppColors.white,
                                                                                      size: 15,
                                                                                    )*/
                                                                                 /* : Icon(
                                                                                      Icons.done_all_outlined,
                                                                                      color: onlinestatus == 'online' ? Colors.blue : Colors.white,
                                                                                      size: 15,
                                                                                    ),*/
                                                                            ]),
                                                                      ],
                                                                    )),
                                                        ),
                                                      ),
                                                      const SizedBox(
                                                        width: 10,
                                                      ),
                                                      if (parts[3] == 'send')
                                                        CircleAvatar(
                                                          backgroundColor:
                                                              const Color(
                                                                  0xFF901133),
                                                          child: Text(
                                                              "${Logindata.name[0]}",
                                                              style: const TextStyle(
                                                                  color: Colors
                                                                      .white)),
                                                        ),
                                                    ],
                                                  )),
                                              onLeftSwipe: () {

                                                setState(() {
                                                  replyvisibility = true;

                                                  replytext(parts);

                                                  afile = fileExp.hasMatch(replytex);
                                                 // print(afile);
                                                });
                                              });
                                        } else {
                                          return Container(
                                            padding: const EdgeInsets.only(
                                                right: 0.0,
                                                left: 0.0,
                                                top: 2,
                                                bottom: 2),
                                            alignment: (parts[3] != 'send'
                                                ? Alignment.topLeft
                                                : Alignment.topRight),
                                            child: GestureDetector(
                                                onLongPressUp: () {
                                                _popupdialog(parts[4],parts[6],parts[2],i);
                                              },
                                              onTap: (){
                                                Navigator.of(context).push(
                                                    MaterialPageRoute(
                                                    builder: (context) =>
                                                    FullScreenImage(image: parts[2])));
                                              },
                                              child: Padding(
                                                  padding: const EdgeInsets.all(5.0),
                                                  child: Row(
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .start,
                                                    mainAxisAlignment:
                                                        parts[3] != 'send'
                                                            ? MainAxisAlignment.start
                                                            : MainAxisAlignment.end,
                                                    children: [
                                                      if (parts[3] == 'Receive')
                                                        CircleAvatar(
                                                          backgroundColor:
                                                              const Color(0xFF5c0e35),
                                                          child: Text(
                                                            "${widget.recentchatuserdetails.name[0]}",
                                                            style: const TextStyle(
                                                                color: Colors
                                                                    .white),
                                                          ),
                                                        ),
                                                      const SizedBox(
                                                        width: 10,
                                                      ),
                                                      Expanded(
                                                          child:
                                                              parts[4] == "text"
                                                                  ? Column(
                                                                      crossAxisAlignment:
                                                                          CrossAxisAlignment
                                                                              .start,
                                                                      children: <
                                                                          Widget>[
                                                                        parts[1] ==
                                                                                'replay'
                                                                            ? Container(
                                                                                decoration: BoxDecoration(color: Colors.grey, borderRadius: BorderRadius.circular(8.0)),
                                                                                child: Column(
                                                                                  children: [
                                                                                    IntrinsicHeight(
                                                                                      child: Row(
                                                                                        children: [
                                                                                          Container(
                                                                                            decoration: const BoxDecoration(
                                                                                              color: Colors.red,
                                                                                              borderRadius: BorderRadius.only(
                                                                                                bottomLeft: Radius.circular(30.0),
                                                                                                topLeft: Radius.circular(30.0),
                                                                                              ),
                                                                                            ),
                                                                                            width: 5.0,
                                                                                          ),
                                                                                          Expanded(
                                                                                            child: Padding(
                                                                                              padding: const EdgeInsets.all(7.0),
                                                                                              child: Container(
                                                                                                decoration: BoxDecoration(
                                                                                                  // color: Colors.grey,
                                                                                                  borderRadius: BorderRadius.circular(8.0),
                                                                                                ),
                                                                                                child: Column(
                                                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                                                  children: [
                                                                                                    const Text(
                                                                                                      "Reply",
                                                                                                      style: TextStyle(
                                                                                                        fontSize: 18.0,
                                                                                                        color: Colors.red,
                                                                                                      ),
                                                                                                    ),
                                                                                                    Text(
                                                                                                      'replayed message' + replytex,
                                                                                                      style: const TextStyle(
                                                                                                        fontSize: 14.0,
                                                                                                        color: Colors.black,
                                                                                                      ),
                                                                                                    )
                                                                                                  ],
                                                                                                ),
                                                                                              ),
                                                                                            ),
                                                                                          )
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                              )
                                                                            : Container(),
                                                                        Text(
                                                                          parts[2].trim(),
                                                                          style: TextStyle(
                                                                              color: parts[3] != 'send' ? Colors.black : Colors.white,
                                                                              fontSize: 16),
                                                                          textAlign:
                                                                              TextAlign.left,
                                                                        )
                                                                      ],
                                                                    )
                                                                  : Container(
                                                                      constraints: BoxConstraints(
                                                                          minWidth: 30
                                                                              .w,
                                                                          maxWidth:
                                                                              60.w),
                                                                      alignment: (parts[3] !=
                                                                              'send'
                                                                          ? Alignment
                                                                              .topLeft
                                                                          : Alignment
                                                                              .topRight),
                                                                      child: Stack(
                                                                        children: [
                                                                          parts[4] == "image"
                                                                              ? ConstrainedBox(
                                                                            constraints: const BoxConstraints(
                                                                                maxHeight: 300,
                                                                                minHeight: 200,
                                                                                maxWidth: 500,
                                                                                minWidth: 200
                                                                            ),
                                                                                child: ClipRRect(
                                                                                    borderRadius: const BorderRadius.only(
                                                                                      topLeft: Radius.circular(10),
                                                                                      //topRight: Radius.circular(10),
                                                                                      bottomLeft: Radius.circular(10),
                                                                                      bottomRight: Radius.circular(10),
                                                                                    ),
                                                                                    child: Image.file(File(parts[2]),

                                                                                        fit: BoxFit.cover,
                                                                                        errorBuilder: (context, url, error) => const Icon(
                                                                                              Icons.error,
                                                                                              size: 70,
                                                                                              color: Colors.red,
                                                                                              semanticLabel: "image not found",
                                                                                            )),
                                                                                  ),
                                                                              )
                                                                              : parts[4] == "video"
                                                                                  ? ClipRRect(
                                                                                      borderRadius: const BorderRadius.only(topLeft: Radius.circular(10), bottomLeft: Radius.circular(10), bottomRight: Radius.circular(10)),
                                                                                      child: AspectRatio(
                                                                                        aspectRatio: 9 / 16,
                                                                                        child: VideoPlayer(_videoPlayerController),
                                                                                      ))
                                                                                  : CachedNetworkImage(
                                                                            fit: BoxFit.cover,
                                                                                      imageUrl: parts[2],
                                                                                      /*height: 40.h,
                                                                                      width: 60.w,*/
                                                                                      placeholder: (context, url) => LinearProgressIndicator(
                                                                                        minHeight: 20.sp,
                                                                                      ),
                                                                                      errorWidget: (context, url, error) => const Icon(
                                                                                        Icons.error,
                                                                                        size: 50,
                                                                                      ),
                                                                                    ),
                                                                          Positioned(
                                                                            bottom:
                                                                                2,
                                                                            right:
                                                                                4,
                                                                            child:
                                                                                Align(
                                                                              alignment: Alignment.bottomRight,
                                                                              child: Row(
                                                                                mainAxisAlignment: MainAxisAlignment.end,
                                                                                crossAxisAlignment: CrossAxisAlignment.end,
                                                                                children: [
                                                                                  Text(
                                                                                    DateFormat('hh:mm a').format(DateTime.parse(parts[5].trim())),
                                                                                    style: TextStyle(color: parts[3] != 'send' ? Colors.black : Colors.white, fontSize: 10),
                                                                                    textAlign: TextAlign.end,
                                                                                  ),
                                                                                  SizedBox(
                                                                                    width: 1.w,
                                                                                  ),
                                                                                 if(parts[3] != 'Receive')
                                                                                   doubletick()

                                                                                      /*: Icon(
                                                                                          Icons.done_all_outlined,
                                                                                          color: onlinestatus == 'online' ? Colors.blue : Colors.white,
                                                                                          size: 15,
                                                                                        ),*/
                                                                                ],
                                                                              ),
                                                                            ),
                                                                          )
                                                                        ],
                                                                      ),
                                                                    )),
                                                      SizedBox(
                                                        width: 10,
                                                      ),
                                                      if (parts[3] == 'send')
                                                        CircleAvatar(
                                                          backgroundColor:
                                                              Color(0xFF901133),
                                                          child: Text(
                                                              "${Logindata.name[0]}",
                                                              style: TextStyle(
                                                                  color: Colors
                                                                      .white)),
                                                        ),
                                                    ],
                                                  )),
                                            ),
                                          );
                                        }
                                      } else {
                                        return null;
                                      }
                                    } else {
                                      return null;
                                    }
                                  },
                                  itemCount: log.length,
                                  separatorBuilder:
                                      (BuildContext context, int index) =>
                                          SizedBox(height: 2.h),
                                ),
                              );
                            },
                          )
                        ],
                      ),
                    )),
                    //SizedBox(height: 10,),
                    Align(
                        alignment: Alignment.bottomCenter,
                        child: Container(
                          decoration: const BoxDecoration(
                              //borderRadius: BorderRadius.circular(30),
                              gradient: LinearGradient(
                            //begin: Alignment.center,
                            // end: Alignment.center,
                            stops: [0.0, 0.8],
                            tileMode: TileMode.clamp,
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Color(0xFF901133),
                              Color(0xFF5c0e35),
                            ],
                          )),
                          padding: const EdgeInsets.symmetric(vertical: 5, horizontal: 5),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              Expanded(child: Container(
                                padding: EdgeInsets.symmetric(horizontal: 0, vertical: 0,),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: replyvisibility == true
                                      ? const BorderRadius.only(
                                          topLeft: Radius.circular(10),
                                          topRight: Radius.circular(10),
                                          bottomLeft: Radius.circular(10),
                                          bottomRight: Radius.circular(10),
                                        )
                                      : BorderRadius.circular(10.0),
                                ),
                                child: Column(
                                  children: <Widget>[
                                    Visibility(
                                      visible: replyvisibility,
                                      child: Container(
                                        margin: const EdgeInsets.only(
                                            left: 8.0, right: 8.0, top: 8.0),
                                        decoration: BoxDecoration(
                                          color: ColorConstant.replaybluegray,
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                        ),
                                        child: Column(
                                          children: [
                                            IntrinsicHeight(
                                              child: Row(
                                                children: [
                                                  Container(
                                                    decoration:
                                                        const BoxDecoration(
                                                      color: Colors.red,
                                                      borderRadius:
                                                          BorderRadius.only(
                                                        bottomLeft:
                                                            Radius.circular(
                                                                30.0),
                                                        topLeft:
                                                            Radius.circular(
                                                                30.0),
                                                      ),
                                                    ),
                                                    width: 5.0,
                                                  ),
                                                  Expanded(
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              7.0),
                                                      child: Container(
                                                        decoration:
                                                            BoxDecoration(
                                                          // color: Colors.grey,
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      8.0),
                                                        ),
                                                        child: Column(
                                                          crossAxisAlignment:
                                                              CrossAxisAlignment
                                                                  .start,
                                                          children: [
                                                            Row(
                                                              mainAxisAlignment:
                                                                  MainAxisAlignment
                                                                      .spaceBetween,
                                                              children: <
                                                                  Widget>[
                                                                Text(
                                                                  "Reply",
                                                                  style:
                                                                      TextStyle(
                                                                    fontSize:
                                                                        13.sp,
                                                                    fontWeight:
                                                                        FontWeight
                                                                            .bold,
                                                                    color: Colors
                                                                        .red,
                                                                  ),
                                                                ),
                                                                IconButton(
                                                                  padding: EdgeInsets.zero,
                                                                  onPressed: () {
                                                                    setState(
                                                                        () {
                                                                      replyvisibility =false;
                                                                      replytex = "";
                                                                    });
                                                                  },
                                                                  icon:
                                                                      const Icon(
                                                                    Icons.close,
                                                                    size: 20,
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            images(),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                    ConstrainedBox(
                                      constraints: BoxConstraints(
                                        maxHeight: 10.h,
                                      ),
                                      child: TextField(
                                        controller: _peerMessage,
                                        autofocus: false,
                                        minLines: 1,
                                        maxLines: 5,
                                        keyboardType: TextInputType.multiline,
                                        decoration: InputDecoration(
                                          hintText: 'Type your message',
                                          border: InputBorder.none,
                                          hintStyle: TextStyle(
                                              fontSize: 2.h,
                                              color: Colors.black38),
                                          focusedBorder: InputBorder.none,
                                          enabledBorder: InputBorder.none,
                                          errorBorder: InputBorder.none,
                                          disabledBorder: InputBorder.none,
                                          contentPadding: const EdgeInsets.only(
                                              left: 10, bottom: 0),
                                        ),
                                        onChanged: (value) {
                                          if (value.isNotEmpty) {
                                            setState(() {
                                              message = _peerMessage.text;
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              )),
                              const SizedBox(
                                width: 10,
                              ),
                              message == ""
                                  ? SizedBox(
                                      width: 8.h,
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: [
                                          InkWell(
                                            onTap: () {
                                              addAttachment();
                                              print('mic button pressed');
                                            },
                                            child: Icon(
                                              Icons.attachment,
                                              size: 3.h,
                                              color: Colors.white,
                                            ),
                                          ),
                                          InkWell(
                                            onTap: () {
                                              print('add button pressed');
                                              getImage(ImageSource.camera);
                                            },
                                            child: Icon(Icons.photo_camera,
                                                size: 3.h, color: Colors.white),
                                          ),
                                        ],
                                      ),
                                    )
                                  : Container(),
                              const SizedBox(width: 5),
                              message != ""
                                  ? Align(
                                      alignment: Alignment.bottomRight,
                                      child: CircleAvatar(
                                        backgroundColor: Colors.white,
                                        radius: 22,
                                        child: IconButton(
                                            icon: const Icon(
                                              Icons.send,
                                              color: Color(0xFF5c0e35),
                                              size: 25,
                                            ),
                                            onPressed: () {
                                              setState(() {
                                                message = "";
                                              });
                                              if (_peerMessage.text
                                                  .trim()
                                                  .isEmpty) {
                                                //EasyLoading.showToast('Kya yrr kuch toh likho');
                                              } else {
                                                _sendPeerMessage();
                                              }
                                            }),
                                      ),
                                    )
                                  : Container()
                            ],
                          ),
                        )),
                  ],
                ),
              )),
        ),
      ),
      onWillPop: () async {
        dbHelper.deletebadge(widget.rtmpeerid);
        return Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => messengertab()),
            (Route<dynamic> route) => false);
      },
    );
  }

  addAttachment() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
          return Container(
            height: 25.h,
            // margin: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20), color: Colors.white),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Choose One",
                      style: TextStyle(fontSize: 15.sp),
                    ),
                    IconButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        icon: const Icon(Icons.cancel))
                  ],
                ),
                Padding(
                    padding:
                        EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                    child: Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          children: [
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.camera_alt,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        getImage(ImageSource.camera);
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Camera")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.image,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        getImage(ImageSource.gallery);
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Gallery")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: const Icon(
                                      Icons.videocam,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _pickVideoFromGallery();
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Video")
                              ],
                            ),
                            Column(
                              children: [
                                CircleAvatar(
                                  radius: 25,
                                  backgroundColor:
                                      AppColors.appNewDarkThemeColor,
                                  child: IconButton(
                                    icon: Icon(
                                      Icons.video_collection,
                                      color: Colors.white,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _pickpdf();
                                        Navigator.pop(context);
                                      });
                                    },
                                  ),
                                ),
                                const Text("Pdf")
                              ],
                            ),
                          ],
                        ),
                      ],
                    ))
              ],
            ),
          );
        });
      },
    );
  }

  Future<void> getImage(ImageSource source) async {
    final pickedFile = await picker.pickImage(source: source, imageQuality: 50);
    imageapi(pickedFile, "","");
    if (replytex != "") {
      var file = replytex + "#@####@#replay#@####@#" + pickedFile.path + '#@####@#send' + '#@####@#image' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
      widget.logController.addLog(file);
      _insert(replytex + "#@####@#replay#@####@#" + pickedFile.path, 'image', 'send', widget.rtmpeerid.toString());
    } else {
      var file = replytex + "#@####@#noreplay#@####@#" + pickedFile.path + '#@####@#send' + '#@####@#image' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
      widget.logController.addLog(file);
      _insert(replytex + "#@####@#noreplay#@####@#" + pickedFile.path, 'image', 'send', widget.rtmpeerid.toString());
    }
  }

  _pickpdf() async {
    FilePickerResult result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc'],
    );
    PlatformFile files = result.files.first;
    final file = XFile('${files.path}');
    imageapi(file, files.name,"");
    if (replytex != "") {
      var file = replytex + "#@####@#replay#@####@#" + files.path + "#@#&" + files.name + '#@####@#send' + '#@####@#doc' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
      widget.logController.addLog(file);
      _insert(replytex + "#@####@#replay#@####@#" + files.path + "#@#&" + files.name,'doc', 'send', widget.rtmpeerid.toString());
    } else {
      var file = replytex + "#@####@#noreplay#@####@#" + files.path + "#@#&" + files.name + '#@####@#send' + '#@####@#doc' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
      widget.logController.addLog(file);
      _insert(replytex + "#@####@#noreplay#@####@#" + files.path + "#@#&" + files.name, 'doc', 'send', widget.rtmpeerid.toString());
    }
    updatelocaldata(widget.rtmpeerid);

  }

  _pickVideoFromGallery() async {
    FilePickerResult result = await FilePicker.platform.pickFiles(type: FileType.custom, allowedExtensions: ['mp4']);
    PlatformFile files = result.files.first;
    final file = XFile('${files.path}');
    var data = replytex + "#@####@#noreplay#@####@#" + files.path + "#@#&" + files.name + '#@####@#send' + '#@####@#video' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
    widget.logController.addLog(data);
    videoAPI(file,files);

  }

  void _scrollDown(log) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _controller.jumpTo(_controller.position.maxScrollExtent + 10);
    });
  }

  void _sendPeerMessage() async {
    if (widget.rtmpeerid.isEmpty) {
      // widget.logController.addLog('Please input peer user id to send message.');
      return;
    }
    if (_peerMessage.text.isEmpty) {
      //  widget.logController.addLog('Please input text to send.');
      return;
    }
    fcmapicall(_peerMessage.text, widget.recentchatuserdetails.fcm_token, '', userpeerid.toString(), 'basic_channel','');
    updatelocaldata(widget.rtmpeerid);


   // print(message);
    try {
      EasyLoading.showToast("peerid"+ _peerMessage.text.toString()+"  "+widget.rtmpeerid.toString(),
          toastPosition: EasyLoadingToastPosition.top,
          duration: const Duration(seconds: 3));
      if (replytex != "") {
        AgoraRtmMessage message = AgoraRtmMessage.fromText(replytex + "#@####@#replay#@####@#" + _peerMessage.text+"#@####@#"+DateTime.now().toString().substring(0,16));
        await widget.client.sendMessageToPeer(widget.rtmpeerid, message, true, false);
        widget.logController.addLog(replytex + '#@####@#replay#@####@#' + _peerMessage.text + '#@####@#send' + '#@####@#text' + '#@####@#' + DateTime.now().toString().substring(0,16) + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid);
        _insert(replytex + "#@####@#replay#@####@#" + _peerMessage.text, "text", 'send', widget.rtmpeerid.toString());
        updatelocaldata(widget.rtmpeerid);
        _peerMessage.clear();
        setState(() {
          replyvisibility = false;
          replytex = "";
        });
      } else {
        AgoraRtmMessage message = AgoraRtmMessage.fromText(replytex + "#@####@#noreplay#@####@#" + _peerMessage.text+"#@####@#"+DateTime.now().toString().substring(0,16));
        await widget.client.sendMessageToPeer(widget.rtmpeerid, message, true, false);
        print('try else-before');
        var id = await _insert(replytex + "#@####@#noreplay#@####@#" + _peerMessage.text, "text", 'send', widget.rtmpeerid.toString());
        widget.logController.addLog(replytex + '#@####@#noreplay#@####@#' + _peerMessage.text + '#@####@#send' + '#@####@#text' + '#@####@#' + DateTime.now().toString() + '#@####@#' + id.toString() + "#@####@#" + widget.rtmpeerid);
        print('try else-after');
        _peerMessage.clear();
       /* setState(() {
          replyvisibility = false;
          replytex = "";
        });*/
      }
    } catch (errorCode) {
      EasyLoading.showToast("error code:-"+ errorCode.toString(), toastPosition: EasyLoadingToastPosition.bottom,
          duration: const Duration(seconds: 5));

      if (replytex != "") {
        AgoraRtmMessage message = AgoraRtmMessage.fromText(replytex + "#@####@#replay#@####@#" + _peerMessage.text+"#@####@#"+DateTime.now().toString().substring(0,16));
        await widget.client.sendMessageToPeer(widget.rtmpeerid, message, true, false);
        widget.logController.addLog(replytex + '#@####@#replay#@####@#' + _peerMessage.text + '#@####@#send' + '#@####@#text' + '#@####@#' + DateTime.now().toString().substring(0,16) + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid);
        _insert(replytex + "#@####@#replay#@####@#" + _peerMessage.text, 'text', 'send', widget.rtmpeerid.toString());
        updatelocaldata(widget.rtmpeerid);
        _peerMessage.clear();
        setState(() {
          replyvisibility = false;
          replytex = "";
        });
      } else {
        AgoraRtmMessage message = AgoraRtmMessage.fromText(_peerMessage.text);
        await widget.client.sendMessageToPeer(replytex + "#@####@#noreplay#@####@#" + widget.rtmpeerid+"#@####@#"+DateTime.now().toString().substring(0,16), message, true, false);
        var id = _insert(replytex + "#@####@#noreplay#@####@#" + _peerMessage.text, 'text', 'send', widget.rtmpeerid.toString());
        widget.logController.addLog(replytex + '#@####@#noreplay#@####@#' + _peerMessage.text + '#@####@#send' + '#@####@#text' + '#@####@#' + DateTime.now().toString().substring(0,16) + '#@####@#' + id.toString() + "#@####@#" + widget.rtmpeerid);
        updatelocaldata(widget.rtmpeerid);
        replytex = "";
        _peerMessage.clear();
        updatelocaldata(widget.rtmpeerid);
        print('catch else-before');
        replytex = "";
        _peerMessage.clear();
        print('catch else-after');
      }
    }
  }

  /// Inserting  chat data in local database.
  _insert(String _peerMessage, String type, diraction, rtmpeerid) async {
    // row to insert
    Map<String, dynamic> row = {
      DatabaseHelper.Id: null,
      DatabaseHelper.message: _peerMessage,
      DatabaseHelper.timestamp: DateTime.now().toString(),
      DatabaseHelper.diraction: diraction,
      DatabaseHelper.reply: replytex,
      DatabaseHelper.type: type,
      DatabaseHelper.from: rtmpeerid,
      DatabaseHelper.to: userpeerid.toString()
    };
    final id = await dbHelper.insert(row);
  //  print('inserted row id: $id');
    return id;
  }

  void firebaseNotification() {
    FirebaseMessaging.onMessage.listen(
      (message) {
        //print("$userpeerid");
       // print('listen a forground message ${message.data}');
        var type = message.data['type'];
        if (type == 'basic_channel') {
          if (widget.recentchatuserdetails.name != message.data['title']) {
            LocalNotificationService.showNotification(message.data);
          }
        } else if (type == 'call_channel') {
          LocalNotificationService.showCallNotification(message.data);
        }
      },
    );
  }

  void _isUserOnline() async {
    PreferenceConnector().setCurrentChatUserName(
      widget.recentchatuserdetails.name,
    );
    if (widget.rtmpeerid.isEmpty) {
     // print('Please input peer user id to query.');
      return;
    }
    try {
      Map<dynamic, dynamic> result =
          await widget.client.queryPeersOnlineStatus([widget.rtmpeerid]);
     // print('Query result: ' + result.toString() + widget.rtmpeerid);
      var clientstatus = result.values.toString();
      if (clientstatus == '(true)') {
        setState(() {
          onlinestatus = "Online";
        });
      }
    } catch (errorCode) {
     // print('Query error: ' + errorCode.toString());
    }
  }

  void updatelocaldata(user) async {
    await dbHelper.sendUpdate(user, DateTime.now());
  //  print('query all rows:');
  }
var datetime=DateTime.now().toString();
  void imageapi(XFile image, name,joiner) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  ApiRepository().uplordchatimage(value, image).then((value) {
                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          fcmapicall('\u200d🧾 ' + name, widget.recentchatuserdetails.fcm_token, value.body.source, '', 'basic_channel','');
                          setState(() {
                            if (name != "") {
                              AgoraRtmMessage message = AgoraRtmMessage.fromText("doc" + "#@####@#noreplay#@####@#" + value.body.source + "#@#&" + name+"#@####@#"+DateTime.now().toString());
                              widget.client.sendMessageToPeer(joiner !=""?joiner: widget.rtmpeerid, message, true, false);
                            } else {
                              AgoraRtmMessage message = AgoraRtmMessage.fromText("#@####@#noreplay#@####@#" + value.body.source+"#@####@#"+ datetime);
                              widget.client.sendMessageToPeer( joiner!=""?joiner: widget.rtmpeerid, message, true, false);
                            }
                          });
                        } else {
                          Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  void videoAPI(final video,files) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                //  _progressDialog.showProgressDialog(context),
                  setState(() {
                    loading = true;
                  }),
                  ApiRepository().uplordchatimage(value, video).then((value) {

                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          fcmapicall(files.name, widget.recentchatuserdetails.fcm_token, value.body.source, '', 'basic_channel','');
                          setState(() {
                            if (replytex != "") {
                             /* var file = replytex + "#@####@#replay#@####@#" + files.path + "#@#&" + files.name + '#@####@#send' + '#@####@#video' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
                              widget.logController.addLog(file);*/
                              _insert(replytex + "#@####@#replay#@####@#" + files.path + "#@#&" + files.name+ "#@#&" + value.body.source,'video', 'send', widget.rtmpeerid.toString());
                            } else {
                             /* var file = replytex + "#@####@#noreplay#@####@#" + files.path + "#@#&" + files.name + '#@####@#send' + '#@####@#video' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid;
                              widget.logController.addLog(file);*/
                              _insert(replytex + "#@####@#noreplay#@####@#" + files.path + "#@#&" + files.name+ "#@#&" + value.body.source, 'video', 'send', widget.rtmpeerid.toString());
                            }
                            loading = false;
                            AgoraRtmMessage message = AgoraRtmMessage.fromText("video#@####@#noreplay#@####@#" + value.body.source + "#@#&" + files.name+"#@####@#"+DateTime.now().toString());
                            widget.client.sendMessageToPeer(widget.rtmpeerid, message, true, false);
                            updatelocaldata(widget.rtmpeerid);
                          });
                        } else {
                          EasyLoading.showToast("Unable to send",
                              toastPosition: EasyLoadingToastPosition.top,
                              duration: const Duration(seconds: 5));
                         // Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  List<String> dataList = ['Copy', 'Delete', 'Forward'];
  List<String> dataList1 = [ 'Delete', 'Forward'];

  Future<String> _popupdialog(type, String selectedmsgid, String message, int i) async {
    var hidecopy=false;
    dynamic data_list=[];
    if(type=="doc"||type=="video"||type=="image"){
      hidecopy =true;
      data_list= dataList1;
    }else{
      data_list= dataList;
    }
    return showDialog(
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(builder: (context, refresh) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                  borderRadius:
                  BorderRadius.circular(30.0)),
              title:Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text("Choose Option",style: TextStyle(fontSize: 2.2.h,
                      fontWeight: FontWeight.bold,color: AppColors.appNewDarkThemeColor),),
                  InkWell(
                    child: Icon(Icons.cancel_outlined,size: 2.4.h,),
                    onTap: (){
                      Navigator.pop(context);
                    },
                  )
                ],
              ),
              content: Container(
                width: double.minPositive,
                child: ListView.builder(
                  shrinkWrap: true,
                  itemCount: data_list.length,
                  itemBuilder: (BuildContext context, int index) {
                    return InkWell(

                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(data_list[index],style: TextStyle(
                                fontSize: 2.h
                            ),),
                            data_list[index] == "Copy"
                                ? Icon(Icons.copy,color: Colors.grey,size: 2.3.h,)
                                : data_list[index] == "Delete"
                                ? Icon(Icons.delete_outline,color: Colors.grey,size: 2.5.h,)
                                : Icon(Icons.forward,color: Colors.grey,size: 2.5.h,)


                          ],
                        )
                      ),

                              onTap: () {
                                switch (index) {
                                  case 0:
                                    if(hidecopy){
                                      _delete(int.parse(selectedmsgid), i);
                                    }else{
                                      Clipboard.setData(ClipboardData(text: message));
                                    }
                                    Navigator.of(context, rootNavigator: true).pop('dialog');
                                    break;
                                  case 1:
                                    if(hidecopy){
                                      forwordList(widget.userlist, message);
                                    }else{
                                      _delete(int.parse(selectedmsgid), i);
                                    }
                                    Navigator.of(context, rootNavigator: true).pop('dialog');

                                    break;
                                  case 2:
                                    if(hidecopy!=true){
                                      forwordList(widget.userlist, message);
                                    }
                                    Navigator.of(context, rootNavigator: true).pop('dialog');
                                    break;
                                  case 3:
                                    Navigator.of(context, rootNavigator: true).pop('dialog');
                                    break;

                                }
                              },



                    );
                  },
                ),
              ));


          });
          });
        }


  Widget images() {
    // if(type[4]!="doc"){
    return afile
        ? SizedBox(
            height: 20.h,
            width: double.infinity,
            child: Image.file(File(replytex),
                errorBuilder: (context, url, error) => const Icon(Icons.error,
                    size: 70,
                    color: Colors.red,
                    semanticLabel: "image not found")),
          )
        : Text(replytex, style: TextStyle(fontSize: 14.0, color: Colors.black));
    /*}else{
      dynamic doclist = parts[2].split('#@#&');
      Text(doclist[1], style: TextStyle(fontSize: 14.0, color: Colors.black));
    }*/
  }

  void fcmapicall(String msg, String fcmtoken, image, call_id, type,profileimage) {
    Helper.checkConnectivity().then((value) => {
          if (value)
            {
              ApiRepository().fcmnotifiction(msg, Logindata.name, fcmtoken, image, call_id,
                      type, Logindata.authToken,profileimage)
                  .then((value) async {})
            }
          else
            {Helper.showNoConnectivityDialog(context)}
        });
  }

  void localdata() {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.Userdata)
        .then((value) => {
              if (value != null)
                {
                  profileJson = jsonDecode(value.toString()),
                  setState(() {
                    Logindata = LocalDataModal.fromJson(profileJson);
                  })
                }
            });

    PreferenceConnector.getJsonToSharedPreferenceefcmtoken(StringConstant.fcmtoken)
        .then((value) => {
              if (value != null)
                {
                  devicefcmtoken= value,
                }
            });
    PreferenceConnector().setScreen("chatscreen");
    PreferenceConnector.setJsonToSharedPreferencechatscreen(
        StringConstant.chatscreen, "chatscreen");
  }

  void videocallapi(String name, String id, String calltype) {
    ApiRepository().videocallapi(name, id, Logindata.authToken).then((value) {
      EasyLoading.dismiss();
      if (value != null) {
        if (value.status == "successfull") {
          fcmapicall(calltype, widget.recentchatuserdetails.fcm_token, '',
              value.body.callId, 'call_channel',widget.recentchatuserdetails.profile_image);
          _callinsert(value.body.calleeName, calltype, 'Dilled_Call');
          if (calltype == 'video') {
            Navigator.of(context).push(
              MaterialPageRoute(
                  builder: (context) => TestLiveStream(
                        appid: value.body.appid,
                        rtmChannel: value.body.callChannel,
                        rtmToken: value.body.callToken,
                        rtmUser: value.body.calleeName,
                        userName: Logindata.id.toString(),
                        channelName: value.body.callChannel,
                        token: value.body.callToken,
                      )),
            );
          } else {
            Navigator.of(context).push(
              MaterialPageRoute(
                  builder: (context) => AudioCallpage(
                        appid: value.body.appid,
                        rtmChannel: value.body.callChannel,
                        rtmToken: value.body.callToken,
                        rtmUser: value.body.calleeName,
                        userName: Logindata.id.toString(),
                        channelName: value.body.callChannel,
                        token: value.body.callToken,
                      )),
            );
          }
        }
      }
    });
  }

  Future<void> _callinsert(String calleeName, String calltype, String Calldrm) async {
    // row to insert
    Map<String, dynamic> row = {
      DatabaseHelper.Id: null,
      DatabaseHelper.calleeName: calleeName,
      DatabaseHelper.timestamp: DateTime.now().toString(),
      DatabaseHelper.calltype: calltype,
      DatabaseHelper.Calldrm: Calldrm,
    };
    final id = await dbHelper.callinsert(row);
   // print('inserted row id: $id');
    return id;
  }

  void clearprefnacedata() {
    PreferenceConnector().setCurrentChatUserName("");
    PreferenceConnector.setJsonToSharedPreferencechatscreen(
        StringConstant.chatscreen, "null");

    PreferenceConnector.getJsonToSharedPreferenceechatscreen(
        StringConstant.chatscreen)
        .then((value) => {
              if (value != null)
                {
                 // print(value + "sdsaa"),
                }
            });
  }

  void forwordList(List<Connections> joiner, forwordedmessage) {
    dynamic json = joiner;
    String jsonArry = jsonEncode(json);
    List jsonData = jsonDecode(jsonArry);
    for (int i = 0; i < jsonData.length; i++) {
      seleteduserlist.add(false);
    }
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
          return Container(
            height: 90.h,
            margin: const EdgeInsets.symmetric(horizontal: 10),
            padding: const EdgeInsets.only(top: 5, bottom: 30, left: 20, right: 20),
            decoration: const BoxDecoration(
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
              image: DecorationImage(
                  image: AssetImage("assets/images/whitebg.png"),
                  fit: BoxFit.cover),
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                SizedBox(
                  height: 1.h,
                ),
                SizedBox(
                  height: .7.h,
                  child: Container(
                    height: 3,
                    width: 80,
                    decoration: BoxDecoration(
                        color: Colors.black,
                        borderRadius: BorderRadius.circular(20)),
                  ),
                ),
                SizedBox(
                  height: 1.5.h,
                ),
                SizedBox(
                    height: 73.h,
                    child: SingleChildScrollView(
                      child: ListView.separated(
                          scrollDirection: Axis.vertical,
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemBuilder: (context, index) {
                            return Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: [
                                    Container(
                                      decoration: BoxDecoration(
                                        color: AppColors.addedColor,
                                        borderRadius: BorderRadius.circular(50),
                                        gradient: LinearGradient(
                                          begin: Alignment.topCenter,
                                          end: Alignment.bottomCenter,
                                          colors: [
                                            AppColors.appNewLightThemeColor,
                                            AppColors.appNewDarkThemeColor,
                                          ],
                                        ),
                                      ),
                                      child: CircleAvatar(
                                        radius: 3.h,
                                        backgroundColor: Colors.transparent,
                                        child: Center(
                                          child: Text(
                                            jsonData[index]['name'][0],
                                            textAlign: TextAlign.center,
                                            style: TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.w200,
                                                fontSize: 3.h),
                                          ),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(
                                      height: 10,
                                      width: 10,
                                    ),
                                    Text(
                                      "${(jsonData[index]['name']).toString()}",
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 15.sp,
                                      ),
                                    ),
                                  ],
                                ),
                                Row(
                                  children: [
                                    GestureDetector(
                                        onTap: () {
                                          setState(() {
                                            if (seleteduserlist[index] == false) {
                                              seleteduserlist[index] = true;
                                              rtmforwordmessage(forwordedmessage,joiner[index]);
                                            } else {
                                              print("Peer ID");
                                            }
                                          });
                                        },
                                        child: seleteduserlist[index] == true
                                            ? SvgPicture.asset(
                                                'assets/icons/radio_button_checked.svg',
                                                height: 5.h,
                                                width: 5.h,
                                              )
                                            : Image.asset(
                                                'assets/icons/radio_button_unchecked.png',
                                                height: 5.h,
                                                width: 5.h,
                                              )),
                                  ],
                                )
                              ],
                            );
                          },
                          separatorBuilder: (_, __) => SizedBox(
                                height: 1.h,
                              ),
                          itemCount: jsonData.length),
                    )),
                SizedBox(
                  height: 2.5.h,
                ),
                GestureDetector(
                    onTap: () {
                      seleteduserlist.clear();
                      Navigator.pop(context);
                    },
                    child: Center(
                      child: Container(
                        width: 40.w,
                        height: 5.h,
                        decoration: BoxDecoration(
                          color: AppColors.addedColor,
                          borderRadius: BorderRadius.circular(10),
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              AppColors.appNewLightThemeColor,
                              AppColors.appNewDarkThemeColor,
                            ],
                          ),
                        ),
                        child: Center(
                          child: Padding(
                            padding: EdgeInsets.symmetric(vertical: 1.h),
                            child: Text(
                              "Done",
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 2.h,
                                letterSpacing: .5,
                                fontWeight: FontWeight.w700,
                              ),
                            ),
                          ),
                        ),
                      ),
                    )),
              ],
            ),
          );
        });
      },
    );
  }



  progressbar(total, current, i) {
    print(loading);
    if (loading == true) {
      if (i != total-1) {
        return const Icon(
          Icons.play_arrow,
          color: Colors.redAccent,
          size: 40,
        );
      } else {
        print("123ifelse");
        return const CircularProgressIndicator(
            semanticsLabel: 'Linear progress indicator');
      }
    } else {
      return const Icon(
        Icons.play_arrow,
        color: Colors.redAccent,
        size: 40,
      );
    }
  }

  void replytext(parts) {
    dynamic name = parts[2].split('#@#&');
    if(parts[4]=="doc"||parts[4]=="video"){
      replytex= name[1];
    }else{
      replytex = parts[2];
    }

  }

  void rtmforwordmessage(forwordedmessage,joiner) {
   /* RegExp fileExp = RegExp(r"(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg|pdf|mp4)");
    dynamic isfile = fileExp.hasMatch(forwordedmessage.text);
    if(isfile){*/
      var strfilename=forwordedmessage.toString();
      var ext = strfilename.substring(strfilename.lastIndexOf('.')+1);
     // print(ext);
      if(ext=="jpg"||ext=="jpeg"||ext=="png"){
        var file = replytex + "#@####@#replay#@####@#" + forwordedmessage + '#@####@#send' + '#@####@#image' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + joiner.peerId;
        widget.logController.addLog(file);
        _insert(replytex + "#@####@#replay#@####@#" + forwordedmessage, 'image', 'send', joiner.peerId);
        final path = XFile('${forwordedmessage}');
        imageapi(path, "",joiner.peerId);
        /*AgoraRtmMessage message = AgoraRtmMessage.fromText("#@####@#noreplay#@####@#" + forwordedmessage);
        widget.client.sendMessageToPeer(joiner.peerId, message, true, false);*/
        updatelocaldata(widget.rtmpeerid);
      }else if(ext=="pdf"){
        dynamic name = forwordedmessage.split('#@#&');
        final path = XFile('${name[0]}');
        imageapi(path,name[1],joiner.peerId);
        var file = replytex + "#@####@#noreplay#@####@#" + name[0] + "#@#&" + name[1] + '#@####@#send' + '#@####@#doc' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + joiner.peerId;
        widget.logController.addLog(file);
        _insert(replytex + "#@####@#noreplay#@####@#" + name[0] + "#@#&" + name[1], 'doc', 'send', joiner.peerId);
        /*AgoraRtmMessage message = AgoraRtmMessage.fromText("doc" + "#@####@#noreplay#@####@#" + name[0] + "#@#&" + name[1]);
        widget.client.sendMessageToPeer(widget.rtmpeerid, message, true, false);*/
        updatelocaldata(widget.rtmpeerid);
      }else if(ext=="mp4"){
        dynamic name = forwordedmessage.split('#@#&');
          var file = replytex + "#@####@#noreplay#@####@#" + name[2] + "#@#&" + name[1] + '#@####@#send' + '#@####@#video' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + joiner.peerId;
          widget.logController.addLog(file);
          _insert(replytex + "#@####@#noreplay#@####@#" + name[2] + "#@#&" + name[1], 'video', 'send',joiner.peerId);
        AgoraRtmMessage message = AgoraRtmMessage.fromText("video#@####@#noreplay#@####@#" + name[2] + "#@#&" + name[1]);
        widget.client.sendMessageToPeer(joiner.peerId, message, true, false);
        updatelocaldata(widget.rtmpeerid);
      }else{
        AgoraRtmMessage message = AgoraRtmMessage.fromText(replytex + "#@####@#forword#@####@#" + forwordedmessage+"#@####@#"+DateTime.now().toString());
        widget.client.sendMessageToPeer(joiner.peerId, message, true, false);
        var id = _insert(replytex + "#@####@#forword#@####@#" + forwordedmessage, "text", 'send', joiner.peerId);
        widget.logController.addLog(replytex + '#@####@#forword#@####@#' + forwordedmessage + '#@####@#send' + '#@####@#text' + '#@####@#' + DateTime.now().toString() + '#@####@#' + id.toString() + "#@####@#" + joiner.peerId);
        fcmapicall(forwordedmessage, joiner.fcm_token, '', '', 'basic_channel','');
        updatelocaldata(widget.rtmpeerid);
      }
  }

  void _gettoken() async {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
      if (value != null)
        {
          ApiRepository().Messanger_rtmtoken(value).then((value) {
            if (value != null) {
              if (value.status == "successfull") {
                setState(() {
                  _login(context, value.body.rtmToken, value.body.rtmUser);
                  userpeerid = value.body.rtmUser;
                  if (value.body.rtmUser != null) {
                    PreferenceConnector.setJsonToSharedPreferencertmuserpeerid(StringConstant.rtmuserpeerid,value.body.rtmUser);
                  }
                });
              } else {
                Helper.showMessage("No Result found");
              }
            }
          })
        }
    }
    );
  }

  void _login(BuildContext context, String token, String userid) async {
    try {
      await _client.login(token, userid);
      print('Login success: ' + userid);
    } catch (errorCode) {
      print('Login error: ' + errorCode.toString());
    }
  }

  doubletick() {
    if(onlinestatus == 'Online'){
     return Icon(
        Icons.done_all_outlined,
       color: AppColors.white,
        size: 15,
      );
    } else{
      return Icon(
        Icons.done,
        color: AppColors.white,
        size: 15,
      );
    }

  }
}




class CustomShape extends CustomPainter {
  final Color bgColor;
  CustomShape(this.bgColor);

  @override
  void paint(Canvas canvas, Size size) {
    var paint = Paint()..color = bgColor;
    var path = Path();
    path.lineTo(-5, 0);
    path.lineTo(0, 10);
    path.lineTo(5, 0);
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return false;
  }
}
