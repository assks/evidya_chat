import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:evidya/constants/color_constant.dart';
import 'package:evidya/constants/string_constant.dart';
import 'package:evidya/network/repository/api_repository.dart';
import 'package:evidya/notificationservice/LocalNotificationService.dart';
import 'package:evidya/screens/messenger/sender_profile_page.dart';
import 'package:evidya/sharedpref/preference_connector.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/services.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:agora_rtm/agora_rtm.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:evidya/localdb/databasehelper.dart';
import 'package:evidya/model/login/autogenerated.dart';
import 'package:evidya/model/login/contactsmatch_Modal.dart';
import 'package:evidya/model/recentchatconnectionslist_modal.dart';
import 'package:evidya/resources/app_colors.dart';
import 'package:evidya/screens/livestreaming/broadcast/TestLiveStream.dart';
import 'package:evidya/screens/messenger/logs.dart';
import 'package:evidya/utils/helper.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sizer/sizer.dart';
import 'package:swipe_to/swipe_to.dart';
import 'package:video_player/video_player.dart';

import '../../../model/GroupListModal.dart';
import '../../livestreaming/broadcast/audiocallpage.dart';
import 'group_profile.dart';

class GroupChatScreen extends StatefulWidget {
  final AgoraRtmClient client;
  final AgoraRtmChannel channel;
  final String rtmpeerid;
  final List<Members> membersList;
  final LogController logController;
  final MessageLog messagePeerId;
  final Contacts userdetails;
  final Groups recentchatuserdetails;
  final GroupMessageLog groupmessagelog;
  final Self self;

  const GroupChatScreen(
      {Key key,
      this.client,
      this.channel,
      this.logController,
      this.userdetails,
      this.membersList,
      this.messagePeerId,
      this.rtmpeerid,
      this.recentchatuserdetails,
      this.self,
      this.groupmessagelog})
      : super(key: key);

  @override
  _GroupChatScreenState createState() => _GroupChatScreenState();
}

class _GroupChatScreenState extends State<GroupChatScreen>
    with WidgetsBindingObserver {
  final _peerMessage = TextEditingController();
  final ScrollController _controller = ScrollController();
  VideoPlayerController _videoPlayerController;
  var onlinestatus = "offline";
  String replytex = "", username;
  List groupMembers = [];
  File _video;
  bool replyvisibility = false;
  final dbHelper = DatabaseHelper.instance;
  MessageLog messagelog = MessageLog();
  final picker = ImagePicker();
  RegExp fileExp = RegExp(r"([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg)");
  dynamic afile = false;
  Timer timer;
  var Logindata, userpeerid;
  dynamic profileJson;
  String recieptPerson;
  String message = "";
  int length = 0;

  @override
  void initState() {
    _isUserOnline();
    Timer.periodic(const Duration(seconds: 10), (timer) {
      _isUserOnline();
    });
    queryRowCount();
    localdata();
    super.initState();
    recieptPerson = widget.recentchatuserdetails.groupName;
    _query();
  }

  void _delete(msgid, index) async {
    var rowsDeleted;
    rowsDeleted = await dbHelper.deletemsg(msgid);
    print(rowsDeleted.toString() + 'row deleted' + index.toString());
    widget.logController.removeLog(index);
  }

  void queryRowCount() async {
    await PreferenceConnector.getJsonToSharedPreferenceertmuserpeerid(
            StringConstant.rtmuserpeerid)
        .then((value) => {
              if (value != null)
                {
                  // setState(() {
                  userpeerid = value
                  //  }),
                }
            });
    final allRows = await dbHelper.groupqueryRowCount(
        widget.rtmpeerid.toString(),
        userpeerid.toString(),
        widget.recentchatuserdetails.groupName);
    print('query all rows:$allRows');
    allRows.forEach((row) => {
          //print(row["reply"] + row["message"] + "#@####@#" + row["diraction"] + "#@####@#" + row['type1'] + row["timestamp"] + "#@####@#" + row["id"].toString() + "#@####@#" + row["from1"].toString(),),
          if (row != null)
            {
              widget.logController.addLog(row["message"] + row["diraction"] + "#@####@#" + row['type1'] + "#@####@#" + row["timestamp"] + "#@####@#" + row["id"].toString() + "#@####@#" + row["to1"]+ "#@####@#" + row["groupname"]),
              setState(() { _controller.animateTo(_controller.position.maxScrollExtent, duration: const Duration(milliseconds: 300),curve: Curves.easeOut);
              }),
            }
        });
  }

  @override
  void dispose() {
    // TODO: implement dispose
    widget.logController.value.clear();
    replytex = '';
    timer?.cancel();
    dbHelper.deletebadge(widget.rtmpeerid);
    PreferenceConnector().setCurrentChatUserName("");
    super.dispose();
  }

  @override
  void deactivate() {
    widget.groupmessagelog.removegroupLog(widget.recentchatuserdetails.groupName);
    // TODO: implement deactivate
    super.deactivate();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return Container(
      height: size.height,
      decoration: const BoxDecoration(
        image: DecorationImage(
            image: AssetImage("assets/images/back_ground.jpg"),
            fit: BoxFit.fill),
      ),
      child: SafeArea(
        child: Scaffold(
            backgroundColor: Colors.transparent,
            appBar: PreferredSize(
                preferredSize: Size.fromHeight(11.h),
                // here the desired height
                child: Column(
                  children: [
                    Container(
                        padding: EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                InkWell(
                                    onTap: () {
                                      dbHelper.deletebadge(widget.rtmpeerid);
                                      Navigator.pop(context);
                                      // Navigator.pushAndRemoveUntil(context,
                                      //     MaterialPageRoute(builder: (context) => BottomNavbar(index: 2)),
                                      //         (Route<dynamic> route) => false);
                                    },
                                    child: const CircleAvatar(
                                      backgroundColor: Colors.transparent,
                                      radius: 18,
                                      child: Icon(
                                        Icons.keyboard_backspace,
                                        size: 20,
                                        color: Colors.white,
                                      ),
                                    )),
                                SizedBox(
                                  width: 1.h,
                                ),
                                InkWell(
                                  child: Row(
                                    children: [
                                      Container(
                                        height: 7.h,
                                        width: 15.w,
                                        decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(10),
                                          color: Colors.transparent,
                                        ),
                                        child: ClipRRect(
                                          borderRadius:
                                              BorderRadius.circular(50),
                                          child: CircleAvatar(
                                            radius: 25,
                                            backgroundColor:
                                                AppColors.appNewDarkThemeColor,
                                            child: Center(
                                                child: widget
                                                            .recentchatuserdetails
                                                            .image !=
                                                        null
                                                    ? CachedNetworkImage(
                                                        imageUrl: StringConstant
                                                                .IMAGE_URL +
                                                            widget
                                                                .recentchatuserdetails
                                                                .image,
                                                        imageBuilder: (context,
                                                                imageProvider) =>
                                                            Container(
                                                          decoration:
                                                              BoxDecoration(
                                                            image: DecorationImage(
                                                                image:
                                                                    imageProvider,
                                                                fit: BoxFit
                                                                    .cover /*,
                                                          colorFilter: const ColorFilter.mode(Colors.red, BlendMode.colorBurn)*/
                                                                ),
                                                          ),
                                                        ),
                                                        height: 30.h,
                                                        width: 40.w,
                                                        placeholder: (context,
                                                                url) =>
                                                            const CircularProgressIndicator(),
                                                        errorWidget: (context,
                                                                url, error) =>
                                                            const Icon(
                                                          Icons.error,
                                                          size: 50,
                                                        ),
                                                      )
                                                    : Text(
                                                        "${widget.userdetails.name[0]}",
                                                        textAlign:
                                                            TextAlign.center,
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: 15.sp))),
                                          ),
                                        ),
                                      ),
                                      SizedBox(
                                        width: 1.h,
                                      ),
                                      Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            widget.recentchatuserdetails.groupName,
                                            style: TextStyle(
                                                fontSize: 16.sp,
                                                color: Colors.white,
                                                fontWeight: FontWeight.bold),
                                          ),
                                          SizedBox(
                                            width: 60.w,
                                            child: Text(
                                              groupMembers.join(", "),
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: TextStyle(
                                                  fontSize: 11.sp,
                                                  color: Colors.white),
                                            ),
                                          )
                                        ],
                                      ),
                                    ],
                                  ),
                                  onTap: () {
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) =>
                                              GroupProfilePage(
                                                  senderName: widget.recentchatuserdetails.groupName,
                                                  groupmember: widget.recentchatuserdetails.members,
                                                  groupimage: widget.recentchatuserdetails.image,
                                                  groupid: widget.recentchatuserdetails.id,
                                                  self:widget.self,
                                                  groupadmin: widget.recentchatuserdetails.groupAdmin,
                                                  logController: widget.logController)),
                                    ).then((value) => setState(() {
                                          print("sdsd back");
                                        }));
                                  },
                                ),
                              ],
                            ),
                          ],
                        )),
                  ],
                )),
            body: Container(
              height: MediaQuery.of(context).size.height,
              width: MediaQuery.of(context).size.width,
              decoration: const BoxDecoration(
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
                color: Colors.transparent,
                image: DecorationImage(
                    image: AssetImage("assets/images/grey_background.jpg"),
                    fit: BoxFit.fill),
              ),
              child: Column(
                children: <Widget>[
                  Expanded(
                      child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                    child: Column(
                      children: <Widget>[
                        ValueListenableBuilder(
                          valueListenable: widget.logController,
                          builder: (context, log, wdgt) {
                            if (log.length >= length) {
                              _scrollDown(log.length);
                              length++;
                            }
                            return Expanded(
                              child: ListView.separated(
                                controller: _controller,
                                reverse: false,
                                shrinkWrap: true,
                                // ignore: missing_return
                                itemBuilder: (context, i) {
                                  dynamic parts = log[i].split('#@####@#');
                                  if (parts[0] == 'group') {
                                    if( parts[9]==widget.recentchatuserdetails.groupName) {
                                      if (parts.length > 0) {
                                        if (parts[4].trim() != null && parts[5] != 'image') {
                                          return SwipeTo(
                                              child: Container(
                                                  padding: const EdgeInsets.only(right: 0.0, left: 0.0, top: 0, bottom: 0),
                                                  alignment: (parts[4] != 'send' ? Alignment.topLeft : Alignment.topRight),
                                                  child: Row(crossAxisAlignment: CrossAxisAlignment.start,
                                                    mainAxisAlignment: parts[4] != 'send' ? MainAxisAlignment.start : MainAxisAlignment.end,
                                                    children: [
                                                      if (parts[4] == 'Receive')usershort(parts[8]),
                                                      const SizedBox(width: 10),
                                                      Container(
                                                        constraints:
                                                        BoxConstraints(
                                                            minWidth: 30.w,
                                                            maxWidth: 60.w),
                                                        padding:
                                                        const EdgeInsets.all(
                                                            0),
                                                        decoration: parts[4] != 'send'
                                                            ? const BoxDecoration(
                                                            color: Colors
                                                                .black12,
                                                            borderRadius:
                                                            BorderRadius
                                                                .only(
                                                              //topLeft: Radius.circular(10),
                                                              topRight: Radius
                                                                  .circular(
                                                                  10),
                                                              bottomLeft: Radius
                                                                  .circular(
                                                                  10),
                                                              bottomRight:
                                                              Radius
                                                                  .circular(
                                                                  10),
                                                            ))
                                                            : const BoxDecoration(
                                                          gradient:
                                                          LinearGradient(
                                                            begin: Alignment
                                                                .topCenter,
                                                            end: Alignment
                                                                .bottomCenter,
                                                            colors: [
                                                              Color(
                                                                  0xFF901133),
                                                              Color(
                                                                  0xFF5c0e35),
                                                            ],
                                                          ),
                                                          borderRadius:
                                                          BorderRadius
                                                              .only(
                                                            topLeft: Radius
                                                                .circular(
                                                                10),
                                                            //topRight: Radius.circular(10),
                                                            bottomLeft: Radius
                                                                .circular(
                                                                10),
                                                            bottomRight:
                                                            Radius
                                                                .circular(
                                                                10),
                                                          ),
                                                        ),
                                                        child: InkWell(
                                                          onTap: () {
                                                            _askFavColor(
                                                                parts[6],
                                                                parts[1], i);
                                                          },
                                                          child: Padding(
                                                              padding: const EdgeInsets
                                                                  .all(5.0),
                                                              child: parts[5] ==
                                                                  "text"
                                                                  ? Stack(
                                                                children: [
                                                                  Column(
                                                                    crossAxisAlignment:
                                                                    CrossAxisAlignment
                                                                        .start,
                                                                    children: <
                                                                        Widget>[
                                                                      if (parts[4] ==
                                                                          "Receive")
                                                                        sendername(
                                                                            parts[8],
                                                                            parts[4]),
                                                                      parts[3] ==
                                                                          'replay'
                                                                          ? Container(
                                                                        margin: const EdgeInsets
                                                                            .only(
                                                                            left: 8.0,
                                                                            right: 8.0,
                                                                            top: 8.0),
                                                                        decoration: BoxDecoration(
                                                                            color: Colors
                                                                                .white,
                                                                            borderRadius: BorderRadius
                                                                                .circular(
                                                                                8.0)),
                                                                        child: IntrinsicHeight(
                                                                            child: Container(
                                                                              decoration: BoxDecoration(
                                                                                color: Color(
                                                                                    0xFFf8ece8),
                                                                                borderRadius: BorderRadius
                                                                                    .circular(
                                                                                    8.0),
                                                                              ),
                                                                              child: Row(
                                                                                children: [
                                                                                  Container(
                                                                                    decoration: BoxDecoration(
                                                                                      color: parts[4] !=
                                                                                          'send'
                                                                                          ? Color(
                                                                                          0xFF800000)
                                                                                          : Colors
                                                                                          .white,
                                                                                      borderRadius: const BorderRadius
                                                                                          .only(
                                                                                        bottomLeft: Radius
                                                                                            .circular(
                                                                                            30.0),
                                                                                        topLeft: Radius
                                                                                            .circular(
                                                                                            30.0),
                                                                                      ),
                                                                                    ),
                                                                                    width: 5.0,
                                                                                  ),
                                                                                  const SizedBox(
                                                                                    height: 5,
                                                                                  ),
                                                                                  Expanded(
                                                                                    child: Container(
                                                                                        padding: const EdgeInsets
                                                                                            .symmetric(
                                                                                            vertical: 8,
                                                                                            horizontal: 8),
                                                                                        decoration: const BoxDecoration(
                                                                                          color: Color(
                                                                                              0xFFf8ece8),
                                                                                          borderRadius: BorderRadius
                                                                                              .only(
                                                                                            bottomRight: Radius
                                                                                                .circular(
                                                                                                30.0),
                                                                                            topRight: Radius
                                                                                                .circular(
                                                                                                30.0),
                                                                                          ),
                                                                                        ),
                                                                                        child: Column(
                                                                                          crossAxisAlignment: CrossAxisAlignment
                                                                                              .start,
                                                                                          children: [
                                                                                            parts[4] !=
                                                                                                'send'
                                                                                                ? const Text(
                                                                                              "You",
                                                                                              style: TextStyle(
                                                                                                fontSize: 14.0,
                                                                                                fontWeight: FontWeight
                                                                                                    .w600,
                                                                                                color: Colors
                                                                                                    .black,
                                                                                              ),
                                                                                            )
                                                                                                : const Text(
                                                                                              "replay",
                                                                                              style: TextStyle(
                                                                                                fontSize: 14.0,
                                                                                                fontWeight: FontWeight
                                                                                                    .w600,
                                                                                                color: Colors
                                                                                                    .black,),
                                                                                            ),
                                                                                            Text(
                                                                                              parts[2] !=
                                                                                                  ""
                                                                                                  ? parts[2]
                                                                                                  : parts[1],
                                                                                              style: TextStyle(
                                                                                                fontSize: 14.0,
                                                                                                color: AppColors
                                                                                                    .cardContainerColor,),
                                                                                            )
                                                                                          ],
                                                                                        )),
                                                                                  ),
                                                                                ],
                                                                              ),
                                                                            )),
                                                                      )
                                                                          : Container(),
                                                                      Padding(
                                                                        padding: const EdgeInsets
                                                                            .only(
                                                                            left: 8.0,
                                                                            right: 8.0,
                                                                            top: 5.0,
                                                                            bottom: 5),
                                                                        child: Row(
                                                                            mainAxisAlignment: MainAxisAlignment
                                                                                .spaceBetween,
                                                                            crossAxisAlignment: CrossAxisAlignment
                                                                                .end,
                                                                            children: [
                                                                              Expanded(
                                                                                child: Text(
                                                                                  parts[1]
                                                                                      .trim(),
                                                                                  style: TextStyle(
                                                                                      color: parts[4] !=
                                                                                          'send'
                                                                                          ? Colors
                                                                                          .black
                                                                                          : Colors
                                                                                          .white,
                                                                                      fontSize: 16),
                                                                                  textAlign: TextAlign
                                                                                      .left,
                                                                                ),
                                                                              ),
                                                                            ]),
                                                                      )
                                                                    ],
                                                                  ),
                                                                  Positioned(
                                                                    bottom:
                                                                    -3,
                                                                    right:
                                                                    1,
                                                                    child:
                                                                    Align(
                                                                      alignment: Alignment
                                                                          .bottomRight,
                                                                      child: Row(
                                                                        mainAxisAlignment: MainAxisAlignment
                                                                            .end,
                                                                        crossAxisAlignment: CrossAxisAlignment
                                                                            .end,
                                                                        children: [
                                                                          Text(
                                                                            DateFormat(
                                                                                'hh:mm a')
                                                                                .format(
                                                                                DateTime
                                                                                    .parse(
                                                                                    parts[6]
                                                                                        .trim())),
                                                                            style: TextStyle(
                                                                                color: parts[4] !=
                                                                                    'send'
                                                                                    ? Colors
                                                                                    .black
                                                                                    : Colors
                                                                                    .white,
                                                                                fontSize: 10),
                                                                            textAlign: TextAlign
                                                                                .end,
                                                                          ),
                                                                          SizedBox(
                                                                            width: 1
                                                                                .w,
                                                                          ),
                                                                          //  parts[4] != 'send' ? Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : AppColors.redDarkColor, size: 15,) : Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : Colors.white, size: 15,),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  )
                                                                ],
                                                              )
                                                                  : Column(
                                                                children: [
                                                                  if (parts[5] ==
                                                                      "image")
                                                                    Image.file(
                                                                        File(
                                                                            parts[1]),
                                                                        fit: BoxFit.cover,
                                                                        errorBuilder: (
                                                                            context,
                                                                            url,
                                                                            error) =>
                                                                        const Icon(
                                                                          Icons
                                                                              .error,
                                                                          size: 70,
                                                                          color: Colors
                                                                              .red,
                                                                          semanticLabel: "image not found",
                                                                        ))
                                                                  else
                                                                    if (parts[5] ==
                                                                        "network")
                                                                      CachedNetworkImage(
                                                                        imageUrl: parts[1],
                                                                        fit: BoxFit.cover,
                                                                        /*height: 40.h,
                                                                        width: 60.w,*/
                                                                        placeholder: (
                                                                            context,
                                                                            url) =>
                                                                            LinearProgressIndicator(
                                                                              minHeight: 20
                                                                                  .sp,
                                                                            ),
                                                                        errorWidget: (
                                                                            context,
                                                                            url,
                                                                            error) =>
                                                                        const Icon(
                                                                          Icons
                                                                              .error,
                                                                          size: 50,
                                                                        ),
                                                                      ),
                                                                  const SizedBox(
                                                                      height: 10),
                                                                  Row(
                                                                      mainAxisAlignment: MainAxisAlignment
                                                                          .end,
                                                                      children: [
                                                                        Text(
                                                                          DateFormat(
                                                                              'hh:mm a')
                                                                              .format(
                                                                              DateTime
                                                                                  .parse(
                                                                                  parts[6]
                                                                                      .trim())),
                                                                          style: TextStyle(
                                                                              color: parts[4] !=
                                                                                  'send'
                                                                                  ? Colors
                                                                                  .black
                                                                                  : Colors
                                                                                  .white,
                                                                              fontSize: 10),
                                                                          textAlign: TextAlign
                                                                              .right,
                                                                        ),
                                                                        SizedBox(
                                                                          width: 1
                                                                              .w,
                                                                        ),
                                                                        // parts[4] != 'send' ? Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : AppColors.redDarkColor, size: 15,) : Icon(Icons.done_all_outlined, color: onlinestatus == 'online' ? Colors.blue : Colors.white, size: 15,),
                                                                      ]),
                                                                ],
                                                              )),
                                                        ),
                                                      ),
                                                      const SizedBox(
                                                        width: 10,
                                                      ),
                                                      if (parts[4] == 'send')
                                                        CircleAvatar(
                                                          backgroundColor:
                                                          Color(0xFF901133),
                                                          child: Text(
                                                              "${Logindata
                                                                  .name[0]}",
                                                              style:
                                                              const TextStyle(
                                                                  color: Colors
                                                                      .white)),
                                                        ),
                                                    ],
                                                  )),
                                              onLeftSwipe: () {
                                                print(
                                                    'Callback from Swipe To Right' +
                                                        parts[4] +
                                                        parts[1]);
                                                setState(() {
                                                  replyvisibility = true;
                                                  replytex = parts[1];
                                                  afile =
                                                      fileExp.hasMatch(
                                                          replytex);
                                                  print(afile);
                                                });
                                              });
                                        } else {
                                          return Container(
                                            padding: const EdgeInsets.only(
                                                right: 0.0,
                                                left: 0.0,
                                                top: 2,
                                                bottom: 2),
                                            alignment: (parts[4] != 'send'
                                                ? Alignment.topLeft
                                                : Alignment.topRight),
                                            child: InkWell(
                                              onTap: () {
                                                _askFavColor(
                                                    parts[6], parts[1], i);
                                              },
                                              child: Padding(
                                                  padding:
                                                  const EdgeInsets.all(5.0),
                                                  child: Row(
                                                    crossAxisAlignment: CrossAxisAlignment
                                                        .start,
                                                    mainAxisAlignment: parts[4] !=
                                                        'send'
                                                        ? MainAxisAlignment
                                                        .start
                                                        : MainAxisAlignment.end,
                                                    children: [
                                                      if (parts[4] == 'Receive')
                                                        usershort(parts[8]),
                                                      const SizedBox(
                                                        width: 10,),
                                                      Expanded(
                                                          child:
                                                          parts[4] == "text"
                                                              ? Column(
                                                            crossAxisAlignment:
                                                            CrossAxisAlignment
                                                                .start,
                                                            children: <
                                                                Widget>[
                                                              parts[1] ==
                                                                  'replay'
                                                                  ? Container(
                                                                decoration: BoxDecoration(
                                                                    color: Colors
                                                                        .grey,
                                                                    borderRadius: BorderRadius
                                                                        .circular(
                                                                        8.0)),
                                                                child: Column(
                                                                  children: [
                                                                    IntrinsicHeight(
                                                                      child: Row(
                                                                        children: [
                                                                          Container(
                                                                            decoration: const BoxDecoration(
                                                                              color: Colors
                                                                                  .red,
                                                                              borderRadius: BorderRadius
                                                                                  .only(
                                                                                bottomLeft: Radius
                                                                                    .circular(
                                                                                    30.0),
                                                                                topLeft: Radius
                                                                                    .circular(
                                                                                    30.0),
                                                                              ),
                                                                            ),
                                                                            width: 5.0,
                                                                          ),
                                                                          Expanded(
                                                                            child: Padding(
                                                                              padding: const EdgeInsets
                                                                                  .all(
                                                                                  7.0),
                                                                              child: Container(
                                                                                decoration: BoxDecoration(
                                                                                  // color: Colors.grey,
                                                                                  borderRadius: BorderRadius
                                                                                      .circular(
                                                                                      8.0),
                                                                                ),
                                                                                child: Column(
                                                                                  crossAxisAlignment: CrossAxisAlignment
                                                                                      .start,
                                                                                  children: [
                                                                                    const Text(
                                                                                      "Reply",
                                                                                      style: TextStyle(
                                                                                        fontSize: 18.0,
                                                                                        color: Colors
                                                                                            .red,
                                                                                      ),
                                                                                    ),
                                                                                    Text(
                                                                                      'replayed message' +
                                                                                          replytex,
                                                                                      style: const TextStyle(
                                                                                        fontSize: 14.0,
                                                                                        color: Colors
                                                                                            .black,
                                                                                      ),
                                                                                    )
                                                                                  ],
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          )
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              )
                                                                  : Container(),
                                                              Text(
                                                                parts[1]
                                                                    .trim(),
                                                                style: TextStyle(
                                                                    color: parts[4] !=
                                                                        'send'
                                                                        ? Colors
                                                                        .black
                                                                        : Colors
                                                                        .white,
                                                                    fontSize: 16),
                                                                textAlign:
                                                                TextAlign.left,
                                                              )
                                                            ],
                                                          )
                                                              : Container(
                                                            constraints: BoxConstraints(
                                                                minWidth: 30.w,
                                                                maxWidth: 60.w),
                                                            alignment: (parts[4] !=
                                                                'send'
                                                                ? Alignment
                                                                .topLeft
                                                                : Alignment
                                                                .topRight),
                                                            child: Column(
                                                              children: [
                                                                if (parts[4] ==
                                                                    "Receive")
                                                                  sendername(
                                                                      parts[8],
                                                                      parts[4]),
                                                                Column(
                                                                  crossAxisAlignment: CrossAxisAlignment
                                                                      .start,
                                                                  children: [
                                                                    parts[5] ==
                                                                        "image"
                                                                        ? ClipRRect(
                                                                      borderRadius: const BorderRadius
                                                                          .only(
                                                                        topLeft: Radius
                                                                            .circular(
                                                                            10),
                                                                        //topRight: Radius.circular(10),
                                                                        bottomLeft: Radius
                                                                            .circular(
                                                                            10),
                                                                        bottomRight: Radius
                                                                            .circular(
                                                                            10),
                                                                      ),
                                                                      child: Image
                                                                          .file(
                                                                          File(
                                                                              parts[1]),
                                                                          height: 40
                                                                              .h,
                                                                          width: 60
                                                                              .w,
                                                                          fit: BoxFit
                                                                              .fill,
                                                                          errorBuilder: (
                                                                              context,
                                                                              url,
                                                                              error) =>
                                                                          const Icon(
                                                                            Icons
                                                                                .error,
                                                                            size: 70,
                                                                            color: Colors
                                                                                .red,
                                                                            semanticLabel: "image not found",
                                                                          )),
                                                                    )
                                                                        : CachedNetworkImage(
                                                                      imageUrl: parts[1],
                                                                      fit: BoxFit.cover,
                                                                      /*height: 40
                                                                          .h,
                                                                      width: 60
                                                                          .w,*/
                                                                      placeholder: (
                                                                          context,
                                                                          url) =>
                                                                          LinearProgressIndicator(
                                                                            minHeight: 20
                                                                                .sp,
                                                                          ),
                                                                      errorWidget: (
                                                                          context,
                                                                          url,
                                                                          error) =>
                                                                      const Icon(
                                                                        Icons
                                                                            .error,
                                                                        size: 50,
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),

                                                                SizedBox(
                                                                  width: 60.w,
                                                                  child: Align(
                                                                    alignment: Alignment
                                                                        .bottomRight,
                                                                    child: Row(
                                                                      mainAxisAlignment: MainAxisAlignment
                                                                          .end,
                                                                      crossAxisAlignment: CrossAxisAlignment
                                                                          .end,
                                                                      children: [
                                                                        Text(
                                                                          DateFormat(
                                                                              'hh:mm a')
                                                                              .format(
                                                                              DateTime
                                                                                  .parse(
                                                                                  parts[6]
                                                                                      .trim())),
                                                                          style: TextStyle(
                                                                              color: parts[4] !=
                                                                                  'send'
                                                                                  ? Colors
                                                                                  .black
                                                                                  : Colors
                                                                                  .white,
                                                                              fontSize: 10),
                                                                          textAlign: TextAlign
                                                                              .end,
                                                                        ),
                                                                        SizedBox(
                                                                          width: 1
                                                                              .w,),

                                                                      ],
                                                                    ),
                                                                  ),

                                                                ),

                                                              ],
                                                            ),
                                                          )),
                                                      SizedBox(
                                                        width: 10,
                                                      ),
                                                      if (parts[4] == 'send')
                                                        CircleAvatar(
                                                          backgroundColor: Color(
                                                              0xFF901133),
                                                          child: Text(
                                                              "${Logindata
                                                                  .name[0]}",
                                                              style: TextStyle(
                                                                  color: Colors
                                                                      .white)),
                                                        ),
                                                    ],
                                                  )),
                                            ),

                                          );
                                        }
                                      } else {
                                        return null;
                                      }
                                    }else{
                                      return null;
                                    }
                                  }
                                },
                                itemCount: log.length,
                                separatorBuilder:
                                    (BuildContext context, int index) =>
                                        SizedBox(
                                  height: 2.h,
                                ),
                              ),
                            );
                          },
                        )
                      ],
                    ),
                  )
                  ),
                  //SizedBox(height: 10,),
                  Align(
                      alignment: Alignment.bottomCenter,
                      child: Container(
                        decoration: const BoxDecoration(
                            //borderRadius: BorderRadius.circular(30),
                            gradient: LinearGradient(
                          //begin: Alignment.center,
                          // end: Alignment.center,
                          stops: [0.0, 0.8],
                          tileMode: TileMode.clamp,
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            Color(0xFF901133),
                            Color(0xFF5c0e35),
                          ],
                        )),
                        padding: const EdgeInsets.symmetric(
                            vertical: 5, horizontal: 5),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            Expanded(
                                child: Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 0,
                                vertical: 0,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: replyvisibility == true
                                    ? const BorderRadius.only(
                                        topLeft: Radius.circular(10),
                                        topRight: Radius.circular(10),
                                        bottomLeft: Radius.circular(10),
                                        bottomRight: Radius.circular(10),
                                      )
                                    : BorderRadius.circular(10.0),
                              ),
                              child: Column(
                                children: <Widget>[
                                  Visibility(
                                    visible: replyvisibility,
                                    child: Container(
                                      margin: EdgeInsets.only(
                                          left: 8.0, right: 8.0, top: 8.0),
                                      decoration: BoxDecoration(
                                        color: ColorConstant.replaybluegray,
                                        borderRadius:
                                            BorderRadius.circular(8.0),
                                      ),
                                      child: Column(
                                        children: [
                                          IntrinsicHeight(
                                            child: Row(
                                              children: [
                                                Container(
                                                  decoration:
                                                      const BoxDecoration(
                                                    color: Colors.red,
                                                    borderRadius:
                                                        BorderRadius.only(
                                                      bottomLeft:
                                                          Radius.circular(30.0),
                                                      topLeft:
                                                          Radius.circular(30.0),
                                                    ),
                                                  ),
                                                  width: 5.0,
                                                ),
                                                Expanded(
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            7.0),
                                                    child: Container(
                                                      decoration: BoxDecoration(
                                                        // color: Colors.grey,
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(8.0),
                                                      ),
                                                      child: Column(
                                                        crossAxisAlignment:
                                                            CrossAxisAlignment
                                                                .start,
                                                        children: [
                                                          Row(
                                                            mainAxisAlignment:
                                                                MainAxisAlignment
                                                                    .spaceBetween,
                                                            children: <Widget>[
                                                              Text(
                                                                "Reply",
                                                                style:
                                                                    TextStyle(
                                                                  fontSize:
                                                                      13.sp,
                                                                  fontWeight:
                                                                      FontWeight
                                                                          .bold,
                                                                  color: Colors
                                                                      .red,
                                                                ),
                                                              ),
                                                              IconButton(
                                                                padding:
                                                                    EdgeInsets
                                                                        .zero,
                                                                constraints:
                                                                    const BoxConstraints(),
                                                                onPressed: () {
                                                                  setState(() {
                                                                    replyvisibility =
                                                                        false;
                                                                    replytex =
                                                                        "";
                                                                  });
                                                                },
                                                                icon: Icon(
                                                                  Icons.close,
                                                                  size: 20,
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                          images(),
                                                        ],
                                                      ),
                                                    ),
                                                  ),
                                                )
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  ConstrainedBox(
                                    constraints: const BoxConstraints(
                                      maxHeight: 105.0,
                                    ),
                                    child: TextField(
                                      controller: _peerMessage,
                                      autofocus: false,
                                      minLines: 1,
                                      maxLines: 5,
                                      keyboardType: TextInputType.multiline,
                                      decoration: InputDecoration(
                                        hintText: 'Type your message',
                                        border: InputBorder.none,
                                        hintStyle: TextStyle(
                                            fontSize: 11.sp,
                                            color: Colors.black38),
                                        focusedBorder: InputBorder.none,
                                        enabledBorder: InputBorder.none,
                                        errorBorder: InputBorder.none,
                                        disabledBorder: InputBorder.none,
                                        contentPadding: const EdgeInsets.only(
                                            left: 10, bottom: 0),
                                      ),
                                      onChanged: (String value) {
                                        // if(_peerMessage.text.length == 1){
                                        setState(() {
                                          message = _peerMessage.text;
                                        });
                                        //  }
                                      },
                                    ),
                                  ),
                                ],
                              ),
                            )),
                            SizedBox(
                              width: 10,
                            ),
                            message == ""
                                ? SizedBox(
                                    width: 60,
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      children: [
                                        InkWell(
                                          onTap: () {
                                            //  _pickVideo();
                                            addAttachment();
                                            //    getImage(ImageSource.gallery);
                                            print('mic button pressed');
                                          },
                                          child: Icon(
                                            Icons.attachment,
                                            color: Colors.white,
                                          ),
                                        ),
                                        InkWell(
                                          onTap: () {
                                            print('add button pressed');
                                            getImage(ImageSource.camera);
                                          },
                                          child: Icon(Icons.photo_camera,
                                              color: Colors.white),
                                        ),
                                      ],
                                    ),
                                  )
                                : Container(),
                            SizedBox(
                              width: 5,
                            ),
                            message != ""
                                ? Align(
                                    alignment: Alignment.bottomRight,
                                    child: CircleAvatar(
                                      backgroundColor: Colors.white,
                                      radius: 22,
                                      child: IconButton(
                                          icon: Icon(
                                            Icons.send,
                                            color: Color(0xFF5c0e35),
                                            size: 25,
                                          ),
                                          onPressed: () {
                                            setState(() {
                                              message = "";
                                            });
                                            if (_peerMessage.text
                                                    .trim()
                                                    .length ==
                                                0) {
                                              //EasyLoading.showToast('Kya yrr kuch toh likho');
                                            } else {
                                              _sendPeerMessage();
                                            }
                                          }),
                                    ),
                                  )
                                : Container()
                          ],
                        ),
                      )),
                ],
              ),
            )),
      ),
    );
  }

  addAttachment() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
          return Container(
            height: 20.h,
            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 60),
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20), color: Colors.white),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Choose One",
                      style: TextStyle(fontSize: 15.sp),
                    ),
                    IconButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        icon: Icon(Icons.cancel))
                  ],
                ),
                Padding(
                    padding:
                        EdgeInsets.symmetric(horizontal: 1.h, vertical: 1.h),
                    child: Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          children: [
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: AppColors.appNewDarkThemeColor,
                              child: IconButton(
                                icon: Icon(
                                  Icons.camera_alt,
                                  color: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    getImage(ImageSource.camera);
                                    Navigator.pop(context);
                                  });
                                },
                              ),
                            ),
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: AppColors.appNewDarkThemeColor,
                              child: IconButton(
                                icon: const Icon(
                                  Icons.image,
                                  color: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    getImage(ImageSource.gallery);
                                    Navigator.pop(context);
                                  });
                                },
                              ),
                            ),
                          /*  CircleAvatar(
                              radius: 25,
                              backgroundColor: AppColors.appNewDarkThemeColor,
                              child: IconButton(
                                icon: Icon(
                                  Icons.video_collection,
                                  color: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    _pickVideo();
                                    Navigator.pop(context);
                                  });
                                },
                              ),
                            ),*/
                          ],
                        ),
                     /*   SizedBox(
                          height: 15,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                          children: [
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: AppColors.appNewDarkThemeColor,
                              child: IconButton(
                                icon: Icon(
                                  Icons.videocam,
                                  color: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    _pickVideoFromCamera();
                                    Navigator.pop(context);
                                  });
                                },
                              ),
                            ),
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: Colors.transparent,
                              child: IconButton(
                                icon: const Icon(
                                  Icons.videocam,
                                  color: Colors.transparent,
                                ),
                                onPressed: () {
                                  setState(() {
                                    // _pickVideoFromCamera();
                                  });
                                },
                              ),
                            ),
                            CircleAvatar(
                              radius: 25,
                              backgroundColor: Colors.transparent,
                              child: IconButton(
                                icon: Icon(
                                  Icons.videocam,
                                  color: Colors.transparent,
                                ),
                                onPressed: () {
                                  setState(() {
                                    // _pickVideoFromCamera();
                                  });
                                },
                              ),
                            ),
                          ],
                        )*/
                      ],
                    ))
              ],
            ),
          );
        });
      },
    );
  }

  Future<void> getImage(ImageSource source) async {
    final pickedFile = await picker.pickImage(source: source, imageQuality: 50);
    imageapi(pickedFile);
    if (replytex != "") {
      var file = "group" "#@####@#" + pickedFile.path + '#@####@#' + replytex + "#@####@#replay#@####@#" + 'send' + '#@####@#image' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid+ "#@####@#" + widget.recentchatuserdetails.groupName;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#replay#@####@#" + pickedFile.path, 'image', 'send');
    } else {
      var file = "group" "#@####@#" + pickedFile.path + '#@####@#' + replytex + "#@####@#noreplay#@####@#" + 'send' + '#@####@#image' + "#@####@#" + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.rtmpeerid+ "#@####@#" + widget.recentchatuserdetails.groupName;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#noreplay#@####@#" + pickedFile.path,
          'image', 'send');
    }
  }

  _pickVideo() async {
    final pickedFile = await picker.getVideo(source: ImageSource.gallery);
    await videoAPI(pickedFile);
    _video = File(pickedFile.path);
    if (replytex != "") {
      var file = replytex +
          "#@####@#replay#@####@#" +
          pickedFile.path +
          '#@####@#send' +
          '#@####@#image' +
          "#@####@#" +
          DateTime.now().toString() +
          "#@####@#" +
          "" +
          "#@####@#" +
          widget.rtmpeerid;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#replay#@####@#" + pickedFile.path,
          'video', 'send');
    } else {
      var file = replytex +
          "#@####@#noreplay#@####@#" +
          pickedFile.path +
          '#@####@#send' +
          '#@####@#image' +
          "#@####@#" +
          DateTime.now().toString() +
          "#@####@#" +
          "" +
          "#@####@#" +
          widget.rtmpeerid;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#noreplay#@####@#" + pickedFile.path,
          'video', 'send');
    }
    _videoPlayerController = VideoPlayerController.file(_video)
      ..initialize().then((_) {
        setState(() {});
        _videoPlayerController.play();
      });
  }

  _pickVideoFromCamera() async {
    PickedFile pickedFile = await picker.getVideo(source: ImageSource.camera);
    print("HHello $pickedFile");
    videoAPI(pickedFile);
    _video = File(pickedFile.path);
    if (replytex != "") {
      var file = "group" +
          "#@####@#" +
          pickedFile.path +
          '#@####@#' +
          replytex +
          "#@####@#replay#@####@#" +
          '#@####@#send' +
          '#@####@#image' +
          "#@####@#" +
          DateTime.now().toString() +
          "#@####@#" +
          "" +
          "#@####@#" +
          widget.rtmpeerid+ "#@####@#" + widget.recentchatuserdetails.groupName;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#replay#@####@#" + pickedFile.path,
          'video', 'send');
    } else {
      var file = "group" +
          "#@####@#" +
          pickedFile.path +
          '#@####@#' +
          replytex +
          "#@####@#noreplay#@####@#" +
          '#@####@#send' +
          '#@####@#image' +
          "#@####@#" +
          DateTime.now().toString() +
          "#@####@#" +
          "" +
          "#@####@#" +
          widget.rtmpeerid+ "#@####@#" + widget.recentchatuserdetails.groupName;
      widget.logController.addLog(file);
      _insertgroup(replytex + "#@####@#noreplay#@####@#" + pickedFile.path,
          'video', 'send');
    }
    _videoPlayerController = VideoPlayerController.file(_video)
      ..initialize().then((_) {
        setState(() {});
        _videoPlayerController.play();
      });
  }

  void _sendPeerMessage() async {
    if (widget.rtmpeerid.isEmpty) {
      // widget.logController.addLog('Please input peer user id to send message.');
      return;
    }
    if (_peerMessage.text.isEmpty) {
      //  widget.logController.addLog('Please input text to send.');
      return;
    }
    // if (onlinestatus == 'offline') {
    for (var row in widget.recentchatuserdetails.members) {
      {
        if (userpeerid != row.pid) {
          fcmapicall(_peerMessage.text, row.fcmToken, '',"group"+widget.recentchatuserdetails.groupName, 'basic_channel');
        }
        print(row);
      }
    }

    try {
      if (replytex != "") {
        AgoraRtmMessage message = AgoraRtmMessage.fromText("group" + "#@####@#" + _peerMessage.text + "#@####@#" + replytex + "#@####@#replay#@####@#" + widget.recentchatuserdetails.groupName+
            "#@####@#"+DateTime.now().toString());
        for (int i = 0; i < widget.membersList.length; i++) {
          await widget.client.sendMessageToPeer(widget.membersList[i].pid, message, true, false);
          //updatelocaldata(widget.rtmpeerid);
        }
        _insertgroup(replytex + "#@####@#replay#@####@#" + _peerMessage.text, "text", 'send');
        widget.logController.addLog('group' "#@####@#" + _peerMessage.text + '#@####@#' + replytex + '#@####@#replay#@####@#' + 'send' + '#@####@#text' + '#@####@#' + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.membersList[0].pid+"#@####@#"+widget.recentchatuserdetails.groupName);
        replytex = "";
        _peerMessage.clear();
      } else {
        AgoraRtmMessage message = AgoraRtmMessage.fromText("group" + "#@####@#" + _peerMessage.text + "#@####@#" + replytex + "#@####@#noreplay#@####@#" + widget.recentchatuserdetails.groupName+
            "#@####@#"+DateTime.now().toString());
        for (int i = 0; i < widget.membersList.length; i++) {
          await widget.client.sendMessageToPeer(widget.membersList[i].pid, message, true, false);
        }
        _insertgroup(replytex + "#@####@#noreplay#@####@#" + _peerMessage.text, "text", 'send');
        widget.logController.addLog('group' +
            "#@####@#" +
            _peerMessage.text +
            "#@####@#" +
            replytex +
            '#@####@#noreplay#@####@#' +
            'send' +
            '#@####@#text' +
            '#@####@#' +
            DateTime.now().toString() +
            '#@####@#' +
            "123456" +
            "#@####@#" +
            widget.membersList[0].pid+
            "#@####@#" +
            widget.recentchatuserdetails.groupName
        );
        _peerMessage.clear();
      }
      setState(() {
        _controller.animateTo(_controller.position.maxScrollExtent,
            duration: const Duration(milliseconds: 300), curve: Curves.easeOut);
        _peerMessage.clear();
        replyvisibility = false;
      });
    } catch (errorCode) {
      if (replytex != "") {
        widget.logController.addLog('group' + "#@####@#" + _peerMessage.text + replytex + '#@####@#replay#@####@#' + 'send' + '#@####@#text' + '#@####@#' + DateTime.now().toString() + "#@####@#" + "" + "#@####@#" + widget.membersList[0].pid+ "#@####@#" + widget.recentchatuserdetails.groupName);
        AgoraRtmMessage message = AgoraRtmMessage.fromText("group" + "#@####@#" + _peerMessage.text + "#@####@#" + replytex + "#@####@#replay#@####@#" + widget.recentchatuserdetails.groupName+
            "#@####@#"+DateTime.now().toString());
        _peerMessage.clear();
        setState(() {
          replyvisibility = false;
          replytex = "";
        });
        _insertgroup(replytex + "#@####@#replay#@####@#" + _peerMessage.text, "text", 'send');
        for (int i = 0; i < widget.membersList.length; i++) {
          await widget.client.sendMessageToPeer(widget.membersList[i].pid, message, true, false);
        }
        setState(() {
          replyvisibility = false;
          replytex = "";
        });

        _peerMessage.clear();
      } else {
        widget.logController.addLog('group' "#@####@#" + _peerMessage.text + '#@####@#' + replytex + '#@####@#replay#@####@#' + 'send' + '#@####@#text' + '#@####@#' +
            DateTime.now().toString() +
            "#@####@#" +
            "" +
            "#@####@#" +
            widget.membersList[0].pid+ "#@####@#" +
            widget.recentchatuserdetails.groupName);
        _insertgroup(replytex + "#@####@#noreplay#@####@#" + _peerMessage.text,
            "text", 'send');
        AgoraRtmMessage message = AgoraRtmMessage.fromText("group" +
            "#@####@#" +
            _peerMessage.text +
            "#@####@#" +
            replytex +
            "#@####@#noreplay#@####@#" +
            widget.recentchatuserdetails.groupName+
            "#@####@#"+DateTime.now().toString());
        replytex = "";
        _peerMessage.clear();
        for (int i = 0; i < widget.membersList.length; i++) {
          await widget.client.sendMessageToPeer(
              widget.membersList[i].pid, message, true, false);
        }
        print('catch else-before');
        // }
        replytex = "";
        _peerMessage.clear();
        print('catch else-after');
        Helper.showMessage('catch_else');
      }
      setState(() {
        _controller.animateTo(_controller.position.maxScrollExtent,
            duration: Duration(milliseconds: 300), curve: Curves.easeOut);
        _peerMessage.clear();
        replytex = "";
        replyvisibility = false;
      });
    }

  }

  _insertgroup(String _peerMessage, String type, diraction) async {
    dynamic parts = _peerMessage.split('#@####@#');
    // row to insert
    Map<String, dynamic> row = {
      DatabaseHelper.Id: null,
      DatabaseHelper.message: "group#@####@#" +
          parts[2] +
          "#@####@##@####@#" +
          parts[1] +
          "#@####@#",
      DatabaseHelper.timestamp: DateTime.now().toString(),
      DatabaseHelper.diraction: diraction,
      DatabaseHelper.reply: replytex,
      DatabaseHelper.type: type,
      DatabaseHelper.from: widget.rtmpeerid.toString(),
      DatabaseHelper.to: userpeerid.toString(),
      DatabaseHelper.groupname:
          widget.recentchatuserdetails.groupName.toString()
    };
    final id = await dbHelper.groupinsert(row);
    print('inserted row id: $id');
    return id;
  }

  void firebaseNotification() {
    FirebaseMessaging.onMessage.listen(
      (message) {
        print("$userpeerid");
        print('listen a forground message ${message.data}');
        var type = message.data['type'];
        if (type == 'basic_channel') {
          if (widget.recentchatuserdetails.groupName != message.data['title']) {
            LocalNotificationService.showNotification(message.data);
          }
        } else if (type == 'call_channel') {
          LocalNotificationService.showCallNotification(message.data);
        }
      },
    );
  }

  void _isUserOnline() async {
    PreferenceConnector().setCurrentChatUserName(
      widget.recentchatuserdetails.groupName,
    );
    if (widget.rtmpeerid.isEmpty) {
      print('Please input peer user id to query.');
      return;
    }
    try {
      Map<dynamic, dynamic> result =
          await widget.client.queryPeersOnlineStatus([widget.rtmpeerid]);
      print('Query result: ' + result.toString() + widget.rtmpeerid);
      var clientstatus = result.values.toString();
      if (clientstatus == '(true)') {
        setState(() {
          onlinestatus = "Online";
        });
      }
    } catch (errorCode) {
      print('Query error: ' + errorCode.toString());
    }
  }

  void updatelocaldata(user) async {
    await dbHelper.sendUpdate(user, DateTime.now());
    print('query all rows:');
  }

  void imageapi(XFile image) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  ApiRepository().uplordchatimage(value, image).then((value) {
                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          // if (onlinestatus == 'offline') {
                          for (var row
                              in widget.recentchatuserdetails.members) {
                            {
                              if (userpeerid != row.pid) {
                                // fcmapicall(_peerMessage.text, row.fcm_token, '','', 'basic_channel');
                                fcmapicall('Image', row.fcmToken,
                                    value.body.source, '', 'basic_channel');
                              }
                              print(row);
                            }
                          }

                          fcmapicall(
                              'Image',
                              widget.recentchatuserdetails.groupAdmin,
                              value.body.source,
                              '',
                              'basic_channel');
                          // }
                          // setState(() {
                          AgoraRtmMessage message = AgoraRtmMessage.fromText(
                              "group#@####@#" +
                                  value.body.source +
                                  "#@####@#" +
                                  replytex +
                                  "#@####@#" +
                                  widget.recentchatuserdetails.groupName+
                                  "#@####@#"+DateTime.now().toString());
                          for (int i = 0; i < widget.membersList.length; i++) {
                            widget.client.sendMessageToPeer(
                                widget.membersList[i].pid,
                                message,
                                true,
                                false);
                          }
                          // });
                        } else {
                          Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  void videoAPI(final video) {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.loginData)
        .then((value) => {
              if (value != null)
                {
                  ApiRepository().uplordchatimage(value, video).then((value) {
                    if (mounted) {
                      if (value != null) {
                        if (value.status == "successfull") {
                          if (onlinestatus == 'offline') {
                            fcmapicall(
                                'Video',
                                widget.recentchatuserdetails.groupAdmin,
                                value.body.source,
                                '',
                                'basic_channel');
                          }
                          setState(() {
                            AgoraRtmMessage message =
                                AgoraRtmMessage.fromText(value.body.source+DateTime.now().toString());
                            widget.client.sendMessageToPeer(
                                widget.rtmpeerid, message, true, false);
                          });
                        } else {
                          Helper.showMessage("Unable to send ");
                        }
                      }
                    }
                  })
                }
            });
  }

  List<String> colorList = ['copy', 'delete'];

  Future<String> _askFavColor(
      String selectedmsgid, String message, int i) async {
    return showDialog(
        context: context,
        builder: (BuildContext context) {
          return StatefulBuilder(builder: (context, refresh) {
            return AlertDialog(
              content: Container(
                width: double.minPositive,
                child: ListView.builder(
                  shrinkWrap: true,
                  itemCount: colorList.length,
                  itemBuilder: (BuildContext context, int index) {
                    return ListTile(
                      title: Text(colorList[index]),
                      onTap: () {
                        switch (index) {
                          case 0:
                            Clipboard.setData(ClipboardData(text: message));
                            Helper.showMessage('Copied');
                            Navigator.of(context, rootNavigator: true)
                                .pop('dialog');
                            break;
                          case 1:
                            Navigator.of(context, rootNavigator: true)
                                .pop('dialog');
                            _delete(int.parse(selectedmsgid), i);
                            break;
                        }

                        // Navigator.pop(context, colorList[index]);
                      },
                    );
                  },
                ),
              ),
            );
          });
        });
  }

  Widget images() {
    return afile
        ? SizedBox(
            height: 20.h,
            width: double.infinity,
            child: Image.file(File(replytex),
                errorBuilder: (context, url, error) => const Icon(Icons.error,
                    size: 70,
                    color: Colors.red,
                    semanticLabel: "image not found")),
          )
        : Text(replytex, style: TextStyle(fontSize: 14.0, color: Colors.black));
  }

  void fcmapicall(String msg, String fcmtoken, image, call_id, type) {
    Helper.checkConnectivity().then((value) => {
          if (value)
            {
              ApiRepository()
                  .fcmnotifiction(msg, widget.recentchatuserdetails.groupName,
                      fcmtoken, image, call_id, type, Logindata.authToken,'')
                  .then((value) async {})
            }
          else
            {Helper.showNoConnectivityDialog(context)}
        });
  }

  localdata() {
    PreferenceConnector.getJsonToSharedPreferencetoken(StringConstant.Userdata)
        .then((value) => {
              if (value != null)
                {
                  profileJson = jsonDecode(value.toString()),
                  setState(() {
                    Logindata = LocalDataModal.fromJson(profileJson);
                  }),
                  print("WIddget ${widget.membersList}"),
                  setState(() {
                    for (int i = 0; i < widget.membersList.length; i++) {
                      var name = widget.membersList[i].name;
                      if (name == Logindata.name) {
                        groupMembers.add("You");
                      } else {
                        groupMembers.add(name);
                      }
                    }
                    print("groupMember $groupMembers");
                  })
                }
            });
  }

  Future<void> _query() async {
    final allRows = await dbHelper.AllRows();
    print('query all rows:$allRows');
    for (var row in allRows) {
      {
        if (row != null) {
          // logController.addLog(row["calleeName"] + "#@####@#" + row["calltype"] + "#@####@#" + row["Calldrm"] +"#@####@#" + row["timestamp"] );}}
        }
      }
    }
  }

/*  void fcmapicall(String msg, String fcmtoken, image, call_id, type) {
    Helper.checkConnectivity().then((value) => {
      if (value)
        {
          ApiRepository().fcmnotifiction(msg, Logindata.name, fcmtoken, image, call_id,
              type, Logindata.authToken)
              .then((value) async {

          })
        }
      else
        {Helper.showNoConnectivityDialog(context)}
    });
  }*/

  void _scrollDown(log) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _controller.jumpTo(_controller.position.maxScrollExtent + 10);
    });
  }

  Widget usershort(id) {
    var name = "";
    for (var row in widget.recentchatuserdetails.members) {
      {
        if (id == row.pid) {
          name = row.name;
        }
        print(row);
      }
    }
    return CircleAvatar(
        backgroundColor: const Color(0xFF5c0e35),
        child: Text(
          name != "" ? name[0] : widget.recentchatuserdetails.groupName[0],
          style: const TextStyle(color: Colors.white),
        ));
  }

   sendername(id, type) {
    var name = "";
    for (var row in widget.recentchatuserdetails.members) {
      {
        if (id == row.pid) {
          name = row.name;
        }
      }
    }
    return Text(name != "" ? name : "", style: const TextStyle(color: Colors.brown));
  }
}
